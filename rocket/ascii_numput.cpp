// This file is part of Asteria.
// Copyright (C) 2018-2025, LH_Mouse. All wrongs reserved.

#include "ascii_numput.hpp"
#include "xassert.hpp"
namespace rocket {
namespace {

constexpr char s_small_decimals[][6] =
  {
    "-0", "-1", "-2", "-3", "-4", "-5", "-6", "-7", "-8", "-9", "-10", "-11",
    "-12", "-13", "-14", "-15", "-16", "-17", "-18", "-19", "-20", "-21",
    "-22", "-23", "-24", "-25", "-26", "-27", "-28", "-29", "-30", "-31",
    "-32", "-33", "-34", "-35", "-36", "-37", "-38", "-39", "-40", "-41",
    "-42", "-43", "-44", "-45", "-46", "-47", "-48", "-49", "-50", "-51",
    "-52", "-53", "-54", "-55", "-56", "-57", "-58", "-59", "-60", "-61",
    "-62", "-63", "-64", "-65", "-66", "-67", "-68", "-69", "-70", "-71",
    "-72", "-73", "-74", "-75", "-76", "-77", "-78", "-79", "-80", "-81",
    "-82", "-83", "-84", "-85", "-86", "-87", "-88", "-89", "-90", "-91",
    "-92", "-93", "-94", "-95", "-96", "-97", "-98", "-99", "-100", "-101",
    "-102", "-103", "-104", "-105", "-106", "-107", "-108", "-109", "-110",
    "-111", "-112", "-113", "-114", "-115", "-116", "-117", "-118", "-119",
    "-120", "-121", "-122", "-123", "-124", "-125", "-126", "-127", "-128",
    "-129", "-130", "-131", "-132", "-133", "-134", "-135", "-136", "-137",
    "-138", "-139", "-140", "-141", "-142", "-143", "-144", "-145", "-146",
    "-147", "-148", "-149", "-150", "-151", "-152", "-153", "-154", "-155",
    "-156", "-157", "-158", "-159", "-160", "-161", "-162", "-163", "-164",
    "-165", "-166", "-167", "-168", "-169", "-170", "-171", "-172", "-173",
    "-174", "-175", "-176", "-177", "-178", "-179", "-180", "-181", "-182",
    "-183", "-184", "-185", "-186", "-187", "-188", "-189", "-190", "-191",
    "-192", "-193", "-194", "-195", "-196", "-197", "-198", "-199", "-200",
    "-201", "-202", "-203", "-204", "-205", "-206", "-207", "-208", "-209",
    "-210", "-211", "-212", "-213", "-214", "-215", "-216", "-217", "-218",
    "-219", "-220", "-221", "-222", "-223", "-224", "-225", "-226", "-227",
    "-228", "-229", "-230", "-231", "-232", "-233", "-234", "-235", "-236",
    "-237", "-238", "-239", "-240", "-241", "-242", "-243", "-244", "-245",
    "-246", "-247", "-248", "-249", "-250", "-251", "-252", "-253", "-254",
    "-255", "-256", "-257", "-258", "-259", "-260", "-261", "-262", "-263",
    "-264", "-265", "-266", "-267", "-268", "-269", "-270", "-271", "-272",
    "-273", "-274", "-275", "-276", "-277", "-278", "-279", "-280", "-281",
    "-282", "-283", "-284", "-285", "-286", "-287", "-288", "-289", "-290",
    "-291", "-292", "-293", "-294", "-295", "-296", "-297", "-298", "-299",
    "-300", "-301", "-302", "-303", "-304", "-305", "-306", "-307", "-308",
    "-309", "-310", "-311", "-312", "-313", "-314", "-315", "-316", "-317",
    "-318", "-319", "-320", "-321", "-322", "-323", "-324", "-325", "-326",
    "-327", "-328", "-329", "-330", "-331", "-332", "-333", "-334", "-335",
    "-336", "-337", "-338", "-339", "-340", "-341", "-342", "-343", "-344",
    "-345", "-346", "-347", "-348", "-349", "-350", "-351", "-352", "-353",
    "-354", "-355", "-356", "-357", "-358", "-359", "-360", "-361", "-362",
    "-363", "-364", "-365", "-366", "-367", "-368", "-369", "-370", "-371",
    "-372", "-373", "-374", "-375", "-376", "-377", "-378", "-379", "-380",
    "-381", "-382", "-383", "-384", "-385", "-386", "-387", "-388", "-389",
    "-390", "-391", "-392", "-393", "-394", "-395", "-396", "-397", "-398",
    "-399", "-400", "-401", "-402", "-403", "-404", "-405", "-406", "-407",
    "-408", "-409", "-410", "-411", "-412", "-413", "-414", "-415", "-416",
    "-417", "-418", "-419", "-420", "-421", "-422", "-423", "-424", "-425",
    "-426", "-427", "-428", "-429", "-430", "-431", "-432", "-433", "-434",
    "-435", "-436", "-437", "-438", "-439", "-440", "-441", "-442", "-443",
    "-444", "-445", "-446", "-447", "-448", "-449", "-450", "-451", "-452",
    "-453", "-454", "-455", "-456", "-457", "-458", "-459", "-460", "-461",
    "-462", "-463", "-464", "-465", "-466", "-467", "-468", "-469", "-470",
    "-471", "-472", "-473", "-474", "-475", "-476", "-477", "-478", "-479",
    "-480", "-481", "-482", "-483", "-484", "-485", "-486", "-487", "-488",
    "-489", "-490", "-491", "-492", "-493", "-494", "-495", "-496", "-497",
    "-498", "-499", "-500", "-501", "-502", "-503", "-504", "-505", "-506",
    "-507", "-508", "-509", "-510", "-511", "-512", "-513", "-514", "-515",
    "-516", "-517", "-518", "-519", "-520", "-521", "-522", "-523", "-524",
    "-525", "-526", "-527", "-528", "-529", "-530", "-531", "-532", "-533",
    "-534", "-535", "-536", "-537", "-538", "-539", "-540", "-541", "-542",
    "-543", "-544", "-545", "-546", "-547", "-548", "-549", "-550", "-551",
    "-552", "-553", "-554", "-555", "-556", "-557", "-558", "-559", "-560",
    "-561", "-562", "-563", "-564", "-565", "-566", "-567", "-568", "-569",
    "-570", "-571", "-572", "-573", "-574", "-575", "-576", "-577", "-578",
    "-579", "-580", "-581", "-582", "-583", "-584", "-585", "-586", "-587",
    "-588", "-589", "-590", "-591", "-592", "-593", "-594", "-595", "-596",
    "-597", "-598", "-599", "-600", "-601", "-602", "-603", "-604", "-605",
    "-606", "-607", "-608", "-609", "-610", "-611", "-612", "-613", "-614",
    "-615", "-616", "-617", "-618", "-619", "-620", "-621", "-622", "-623",
    "-624", "-625", "-626", "-627", "-628", "-629", "-630", "-631", "-632",
    "-633", "-634", "-635", "-636", "-637", "-638", "-639", "-640", "-641",
    "-642", "-643", "-644", "-645", "-646", "-647", "-648", "-649", "-650",
    "-651", "-652", "-653", "-654", "-655", "-656", "-657", "-658", "-659",
    "-660", "-661", "-662", "-663", "-664", "-665", "-666", "-667", "-668",
    "-669", "-670", "-671", "-672", "-673", "-674", "-675", "-676", "-677",
    "-678", "-679", "-680", "-681", "-682", "-683", "-684", "-685", "-686",
    "-687", "-688", "-689", "-690", "-691", "-692", "-693", "-694", "-695",
    "-696", "-697", "-698", "-699", "-700", "-701", "-702", "-703", "-704",
    "-705", "-706", "-707", "-708", "-709", "-710", "-711", "-712", "-713",
    "-714", "-715", "-716", "-717", "-718", "-719", "-720", "-721", "-722",
    "-723", "-724", "-725", "-726", "-727", "-728", "-729", "-730", "-731",
    "-732", "-733", "-734", "-735", "-736", "-737", "-738", "-739", "-740",
    "-741", "-742", "-743", "-744", "-745", "-746", "-747", "-748", "-749",
    "-750", "-751", "-752", "-753", "-754", "-755", "-756", "-757", "-758",
    "-759", "-760", "-761", "-762", "-763", "-764", "-765", "-766", "-767",
    "-768", "-769", "-770", "-771", "-772", "-773", "-774", "-775", "-776",
    "-777", "-778", "-779", "-780", "-781", "-782", "-783", "-784", "-785",
    "-786", "-787", "-788", "-789", "-790", "-791", "-792", "-793", "-794",
    "-795", "-796", "-797", "-798", "-799", "-800", "-801", "-802", "-803",
    "-804", "-805", "-806", "-807", "-808", "-809", "-810", "-811", "-812",
    "-813", "-814", "-815", "-816", "-817", "-818", "-819", "-820", "-821",
    "-822", "-823", "-824", "-825", "-826", "-827", "-828", "-829", "-830",
    "-831", "-832", "-833", "-834", "-835", "-836", "-837", "-838", "-839",
    "-840", "-841", "-842", "-843", "-844", "-845", "-846", "-847", "-848",
    "-849", "-850", "-851", "-852", "-853", "-854", "-855", "-856", "-857",
    "-858", "-859", "-860", "-861", "-862", "-863", "-864", "-865", "-866",
    "-867", "-868", "-869", "-870", "-871", "-872", "-873", "-874", "-875",
    "-876", "-877", "-878", "-879", "-880", "-881", "-882", "-883", "-884",
    "-885", "-886", "-887", "-888", "-889", "-890", "-891", "-892", "-893",
    "-894", "-895", "-896", "-897", "-898", "-899", "-900", "-901", "-902",
    "-903", "-904", "-905", "-906", "-907", "-908", "-909", "-910", "-911",
    "-912", "-913", "-914", "-915", "-916", "-917", "-918", "-919", "-920",
    "-921", "-922", "-923", "-924", "-925", "-926", "-927", "-928", "-929",
    "-930", "-931", "-932", "-933", "-934", "-935", "-936", "-937", "-938",
    "-939", "-940", "-941", "-942", "-943", "-944", "-945", "-946", "-947",
    "-948", "-949", "-950", "-951", "-952", "-953", "-954", "-955", "-956",
    "-957", "-958", "-959", "-960", "-961", "-962", "-963", "-964", "-965",
    "-966", "-967", "-968", "-969", "-970", "-971", "-972", "-973", "-974",
    "-975", "-976", "-977", "-978", "-979", "-980", "-981", "-982", "-983",
    "-984", "-985", "-986", "-987", "-988", "-989", "-990", "-991", "-992",
    "-993", "-994", "-995", "-996", "-997", "-998", "-999", "-1000", "-1001",
    "-1002", "-1003", "-1004", "-1005", "-1006", "-1007", "-1008", "-1009",
    "-1010", "-1011", "-1012", "-1013", "-1014", "-1015", "-1016", "-1017",
    "-1018", "-1019", "-1020", "-1021", "-1022", "-1023", "-1024", "-1025",
    "-1026", "-1027", "-1028", "-1029", "-1030", "-1031", "-1032", "-1033",
    "-1034", "-1035", "-1036", "-1037", "-1038", "-1039", "-1040", "-1041",
    "-1042", "-1043", "-1044", "-1045", "-1046", "-1047", "-1048", "-1049",
    "-1050", "-1051", "-1052", "-1053", "-1054", "-1055", "-1056", "-1057",
    "-1058", "-1059", "-1060", "-1061", "-1062", "-1063", "-1064", "-1065",
    "-1066", "-1067", "-1068", "-1069", "-1070", "-1071", "-1072", "-1073",
    "-1074", "-1075", "-1076", "-1077", "-1078", "-1079", "-1080", "-1081",
    "-1082", "-1083", "-1084", "-1085", "-1086", "-1087", "-1088", "-1089",
    "-1090", "-1091", "-1092", "-1093", "-1094", "-1095", "-1096", "-1097",
    "-1098", "-1099", "-1100", "-1101", "-1102", "-1103", "-1104", "-1105",
    "-1106", "-1107", "-1108", "-1109", "-1110", "-1111", "-1112", "-1113",
    "-1114", "-1115", "-1116", "-1117", "-1118", "-1119", "-1120", "-1121",
    "-1122", "-1123", "-1124", "-1125", "-1126", "-1127", "-1128", "-1129",
    "-1130", "-1131", "-1132", "-1133", "-1134", "-1135", "-1136", "-1137",
    "-1138", "-1139", "-1140", "-1141", "-1142", "-1143", "-1144", "-1145",
    "-1146", "-1147", "-1148", "-1149", "-1150", "-1151", "-1152", "-1153",
    "-1154", "-1155", "-1156", "-1157", "-1158", "-1159", "-1160", "-1161",
    "-1162", "-1163", "-1164", "-1165", "-1166", "-1167", "-1168", "-1169",
    "-1170", "-1171", "-1172", "-1173", "-1174", "-1175", "-1176", "-1177",
    "-1178", "-1179", "-1180", "-1181", "-1182", "-1183", "-1184", "-1185",
    "-1186", "-1187", "-1188", "-1189", "-1190", "-1191", "-1192", "-1193",
    "-1194", "-1195", "-1196", "-1197", "-1198", "-1199", "-1200", "-1201",
    "-1202", "-1203", "-1204", "-1205", "-1206", "-1207", "-1208", "-1209",
    "-1210", "-1211", "-1212", "-1213", "-1214", "-1215", "-1216", "-1217",
    "-1218", "-1219", "-1220", "-1221", "-1222", "-1223", "-1224", "-1225",
    "-1226", "-1227", "-1228", "-1229", "-1230", "-1231", "-1232", "-1233",
    "-1234", "-1235", "-1236", "-1237", "-1238", "-1239", "-1240", "-1241",
    "-1242", "-1243", "-1244", "-1245", "-1246", "-1247", "-1248", "-1249",
    "-1250", "-1251", "-1252", "-1253", "-1254", "-1255", "-1256", "-1257",
    "-1258", "-1259", "-1260", "-1261", "-1262", "-1263", "-1264", "-1265",
    "-1266", "-1267", "-1268", "-1269", "-1270", "-1271", "-1272", "-1273",
    "-1274", "-1275", "-1276", "-1277", "-1278", "-1279", "-1280", "-1281",
    "-1282", "-1283", "-1284", "-1285", "-1286", "-1287", "-1288", "-1289",
    "-1290", "-1291", "-1292", "-1293", "-1294", "-1295", "-1296", "-1297",
    "-1298", "-1299", "-1300", "-1301", "-1302", "-1303", "-1304", "-1305",
    "-1306", "-1307", "-1308", "-1309", "-1310", "-1311", "-1312", "-1313",
    "-1314", "-1315", "-1316", "-1317", "-1318", "-1319", "-1320", "-1321",
    "-1322", "-1323", "-1324", "-1325", "-1326", "-1327", "-1328", "-1329",
    "-1330", "-1331", "-1332", "-1333", "-1334", "-1335", "-1336", "-1337",
    "-1338", "-1339", "-1340", "-1341", "-1342", "-1343", "-1344", "-1345",
    "-1346", "-1347", "-1348", "-1349", "-1350", "-1351", "-1352", "-1353",
    "-1354", "-1355", "-1356", "-1357", "-1358", "-1359", "-1360", "-1361",
    "-1362", "-1363", "-1364", "-1365", "-1366", "-1367", "-1368", "-1369",
    "-1370", "-1371", "-1372", "-1373", "-1374", "-1375", "-1376", "-1377",
    "-1378", "-1379", "-1380", "-1381", "-1382", "-1383", "-1384", "-1385",
    "-1386", "-1387", "-1388", "-1389", "-1390", "-1391", "-1392", "-1393",
    "-1394", "-1395", "-1396", "-1397", "-1398", "-1399", "-1400", "-1401",
    "-1402", "-1403", "-1404", "-1405", "-1406", "-1407", "-1408", "-1409",
    "-1410", "-1411", "-1412", "-1413", "-1414", "-1415", "-1416", "-1417",
    "-1418", "-1419", "-1420", "-1421", "-1422", "-1423", "-1424", "-1425",
    "-1426", "-1427", "-1428", "-1429", "-1430", "-1431", "-1432", "-1433",
    "-1434", "-1435", "-1436", "-1437", "-1438", "-1439", "-1440", "-1441",
    "-1442", "-1443", "-1444", "-1445", "-1446", "-1447", "-1448", "-1449",
    "-1450", "-1451", "-1452", "-1453", "-1454", "-1455", "-1456", "-1457",
    "-1458", "-1459", "-1460", "-1461", "-1462", "-1463", "-1464", "-1465",
    "-1466", "-1467", "-1468", "-1469", "-1470", "-1471", "-1472", "-1473",
    "-1474", "-1475", "-1476", "-1477", "-1478", "-1479", "-1480", "-1481",
    "-1482", "-1483", "-1484", "-1485", "-1486", "-1487", "-1488", "-1489",
    "-1490", "-1491", "-1492", "-1493", "-1494", "-1495", "-1496", "-1497",
    "-1498", "-1499", "-1500", "-1501", "-1502", "-1503", "-1504", "-1505",
    "-1506", "-1507", "-1508", "-1509", "-1510", "-1511", "-1512", "-1513",
    "-1514", "-1515", "-1516", "-1517", "-1518", "-1519", "-1520", "-1521",
    "-1522", "-1523", "-1524", "-1525", "-1526", "-1527", "-1528", "-1529",
    "-1530", "-1531", "-1532", "-1533", "-1534", "-1535", "-1536", "-1537",
    "-1538", "-1539", "-1540", "-1541", "-1542", "-1543", "-1544", "-1545",
    "-1546", "-1547", "-1548", "-1549", "-1550", "-1551", "-1552", "-1553",
    "-1554", "-1555", "-1556", "-1557", "-1558", "-1559", "-1560", "-1561",
    "-1562", "-1563", "-1564", "-1565", "-1566", "-1567", "-1568", "-1569",
    "-1570", "-1571", "-1572", "-1573", "-1574", "-1575", "-1576", "-1577",
    "-1578", "-1579", "-1580", "-1581", "-1582", "-1583", "-1584", "-1585",
    "-1586", "-1587", "-1588", "-1589", "-1590", "-1591", "-1592", "-1593",
    "-1594", "-1595", "-1596", "-1597", "-1598", "-1599", "-1600", "-1601",
    "-1602", "-1603", "-1604", "-1605", "-1606", "-1607", "-1608", "-1609",
    "-1610", "-1611", "-1612", "-1613", "-1614", "-1615", "-1616", "-1617",
    "-1618", "-1619", "-1620", "-1621", "-1622", "-1623", "-1624", "-1625",
    "-1626", "-1627", "-1628", "-1629", "-1630", "-1631", "-1632", "-1633",
    "-1634", "-1635", "-1636", "-1637", "-1638", "-1639", "-1640", "-1641",
    "-1642", "-1643", "-1644", "-1645", "-1646", "-1647", "-1648", "-1649",
    "-1650", "-1651", "-1652", "-1653", "-1654", "-1655", "-1656", "-1657",
    "-1658", "-1659", "-1660", "-1661", "-1662", "-1663", "-1664", "-1665",
    "-1666", "-1667", "-1668", "-1669", "-1670", "-1671", "-1672", "-1673",
    "-1674", "-1675", "-1676", "-1677", "-1678", "-1679", "-1680", "-1681",
    "-1682", "-1683", "-1684", "-1685", "-1686", "-1687", "-1688", "-1689",
    "-1690", "-1691", "-1692", "-1693", "-1694", "-1695", "-1696", "-1697",
    "-1698", "-1699", "-1700", "-1701", "-1702", "-1703", "-1704", "-1705",
    "-1706", "-1707", "-1708", "-1709", "-1710", "-1711", "-1712", "-1713",
    "-1714", "-1715", "-1716", "-1717", "-1718", "-1719", "-1720", "-1721",
    "-1722", "-1723", "-1724", "-1725", "-1726", "-1727", "-1728", "-1729",
    "-1730", "-1731", "-1732", "-1733", "-1734", "-1735", "-1736", "-1737",
    "-1738", "-1739", "-1740", "-1741", "-1742", "-1743", "-1744", "-1745",
    "-1746", "-1747", "-1748", "-1749", "-1750", "-1751", "-1752", "-1753",
    "-1754", "-1755", "-1756", "-1757", "-1758", "-1759", "-1760", "-1761",
    "-1762", "-1763", "-1764", "-1765", "-1766", "-1767", "-1768", "-1769",
    "-1770", "-1771", "-1772", "-1773", "-1774", "-1775", "-1776", "-1777",
    "-1778", "-1779", "-1780", "-1781", "-1782", "-1783", "-1784", "-1785",
    "-1786", "-1787", "-1788", "-1789", "-1790", "-1791", "-1792", "-1793",
    "-1794", "-1795", "-1796", "-1797", "-1798", "-1799", "-1800", "-1801",
    "-1802", "-1803", "-1804", "-1805", "-1806", "-1807", "-1808", "-1809",
    "-1810", "-1811", "-1812", "-1813", "-1814", "-1815", "-1816", "-1817",
    "-1818", "-1819", "-1820", "-1821", "-1822", "-1823", "-1824", "-1825",
    "-1826", "-1827", "-1828", "-1829", "-1830", "-1831", "-1832", "-1833",
    "-1834", "-1835", "-1836", "-1837", "-1838", "-1839", "-1840", "-1841",
    "-1842", "-1843", "-1844", "-1845", "-1846", "-1847", "-1848", "-1849",
    "-1850", "-1851", "-1852", "-1853", "-1854", "-1855", "-1856", "-1857",
    "-1858", "-1859", "-1860", "-1861", "-1862", "-1863", "-1864", "-1865",
    "-1866", "-1867", "-1868", "-1869", "-1870", "-1871", "-1872", "-1873",
    "-1874", "-1875", "-1876", "-1877", "-1878", "-1879", "-1880", "-1881",
    "-1882", "-1883", "-1884", "-1885", "-1886", "-1887", "-1888", "-1889",
    "-1890", "-1891", "-1892", "-1893", "-1894", "-1895", "-1896", "-1897",
    "-1898", "-1899", "-1900", "-1901", "-1902", "-1903", "-1904", "-1905",
    "-1906", "-1907", "-1908", "-1909", "-1910", "-1911", "-1912", "-1913",
    "-1914", "-1915", "-1916", "-1917", "-1918", "-1919", "-1920", "-1921",
    "-1922", "-1923", "-1924", "-1925", "-1926", "-1927", "-1928", "-1929",
    "-1930", "-1931", "-1932", "-1933", "-1934", "-1935", "-1936", "-1937",
    "-1938", "-1939", "-1940", "-1941", "-1942", "-1943", "-1944", "-1945",
    "-1946", "-1947", "-1948", "-1949", "-1950", "-1951", "-1952", "-1953",
    "-1954", "-1955", "-1956", "-1957", "-1958", "-1959", "-1960", "-1961",
    "-1962", "-1963", "-1964", "-1965", "-1966", "-1967", "-1968", "-1969",
    "-1970", "-1971", "-1972", "-1973", "-1974", "-1975", "-1976", "-1977",
    "-1978", "-1979", "-1980", "-1981", "-1982", "-1983", "-1984", "-1985",
    "-1986", "-1987", "-1988", "-1989", "-1990", "-1991", "-1992", "-1993",
    "-1994", "-1995", "-1996", "-1997", "-1998", "-1999", "-2000", "-2001",
    "-2002", "-2003", "-2004", "-2005", "-2006", "-2007", "-2008", "-2009",
    "-2010", "-2011", "-2012", "-2013", "-2014", "-2015", "-2016", "-2017",
    "-2018", "-2019", "-2020", "-2021", "-2022", "-2023", "-2024", "-2025",
    "-2026", "-2027", "-2028", "-2029", "-2030", "-2031", "-2032", "-2033",
    "-2034", "-2035", "-2036", "-2037", "-2038", "-2039", "-2040", "-2041",
    "-2042", "-2043", "-2044", "-2045", "-2046", "-2047",
  };

inline
void
do_get_small_decimal(const char*& str_out, uint32_t& len_out, uint32_t value)
  {
    // Get the string for a non-negative value.
    str_out = s_small_decimals[value] + 1;
    uint32_t bytes;
    ::memcpy(&bytes, str_out, sizeof(bytes));
    bytes = ROCKET_LETOH32(bytes);

    // Now see whether `bytes` contains a zero byte. The condition
    // is that there shall be a byte whose MSB becomes one after the
    // subtraction below, but was zero before it.
    constexpr uint32_t bmask = UINT32_MAX / 0xFFU;
    bytes = (bytes - bmask) & (bytes ^ (bmask << 7)) & (bmask << 7);
    len_out = ROCKET_TZCNT32(bytes) / 8U;
  }

inline
uint32_t
do_write_digits_backwards(char*& wptr, uint64_t value, uint32_t base, uint32_t precision)
  {
    uint64_t reg = value;
    uint32_t len = 0;

    while(reg != 0) {
      // Shift a digit from `reg` and write it.
      uint64_t digit = reg % base;
      reg /= base;

      wptr --;
      *wptr = (char) ('0' + digit + ((9U - digit) >> 61));
      len ++;
    }

    while(len < precision) {
      // Prepend zeroes up to `precision`.
      wptr --;
      *wptr = '0';
      len ++;
    }

    return len;
  }

#if 0
/* This program is used to generate the multiplier table for decimal
 * numbers. Each multiplier for the mantissa is split into two parts.
 * The base of exponents is 2.
 *
 * Compile with:
 *   gcc -std=c99 -W{all,extra,{sign-,}conversion} table.c -lquadmath
**/

#include <quadmath.h>
#include <stdio.h>

void
do_print_one(int e)
  {
    __float128 value, frac;
    int exp2;
    unsigned long long mant;

    // Calculate the boundary.
    value = powq(10, e);

    // Get the binary exponent.
    frac = frexpq(value, &exp2);
    if(exp2 < -1072) {
      // The first element shall be zero.
      mant = 0;
    }
    else if(exp2 < -1022) {
      // The value is subnormal.
      frac = ldexpq(value, 1074);
      frac = ceilq(frac);
      mant = (unsigned long long) frac;
    }
    else {
      // Shift out bits that do not fit in a `double`, then round the
      // fraction to 53 bits towards positive infinity.
      frac = ldexpq(value, 53 - exp2);
      frac = ceilq(frac);
      mant = (unsigned long long) frac & 0xFFFFFFFFFFFFF;
      mant |= (unsigned long long) (exp2 + 1022) << 52;
    }

    // Print the bit pattern of the boundary.
    printf("    { 0x%.16llX, ", mant);

    // Calculate the reciprocal of the boundary.
    // We only need 17 decimal digits.
    value = 1.0e17 / value;

    // Break it down into the fraction and exponent.
    frac = frexpq(value, &exp2);

    // The fraction is in 64-bit mantissa format.
    frac = ldexpq(frac, 64);
    frac = ceilq(frac);
    mant = (unsigned long long) frac;

    // Print the mantissa in fixed-point format.
    printf(" 0x%.16llX, ", mant);

    // Print the binary exponent.
    printf("%+5d },", exp2);

    // Print the decimal exponent comments.
    printf("  // 1.0e%+.3d\n", e);
  }

int
main(void)
  {
    int e;

    for(e = -324; e <= +308; ++e)
      do_print_one(e);

    return 0;
  }
#endif

// These are generated data. Do not edit by hand!
struct decimal_multiplier
  {
    uint64_t bound;
    uint64_t mant;
    int exp2;
  }
constexpr s_decimal_multipliers[] =
  {
    { 0x0000000000000000,  0xDB68C2CA82ED2A06, +1133 },  // 1.0e-324
    { 0x0000000000000003,  0xAF87023B9BF0EE6B, +1130 },  // 1.0e-323
    { 0x0000000000000015,  0x8C6C01C9498D8B89, +1127 },  // 1.0e-322
    { 0x00000000000000CB,  0xE0ACCFA875AF45A8, +1123 },  // 1.0e-321
    { 0x00000000000007E9,  0xB3BD72ED2AF29E20, +1120 },  // 1.0e-320
    { 0x0000000000004F11,  0x8FCAC257558EE4E7, +1117 },  // 1.0e-319
    { 0x00000000000316A3,  0xE61136F2227E3B0A, +1113 },  // 1.0e-318
    { 0x00000000001EE257,  0xB80DC58E81FE95A2, +1110 },  // 1.0e-317
    { 0x000000000134D762,  0x933E37A534CBAAE8, +1107 },  // 1.0e-316
    { 0x000000000C1069CE,  0xEB96BF6EBADF77D9, +1103 },  // 1.0e-315
    { 0x0000000078A42206,  0xBC789925624C5FE1, +1100 },  // 1.0e-314
    { 0x00000004B6695433,  0x96C6E0EAB509E64E, +1097 },  // 1.0e-313
    { 0x0000002F201D49FC,  0xF13E34AABB430A16, +1093 },  // 1.0e-312
    { 0x000001D74124E3D2,  0xC0FE908895CF3B45, +1090 },  // 1.0e-311
    { 0x000012688B70E62C,  0x9A65406D44A5C904, +1087 },  // 1.0e-310
    { 0x0000B8157268FDAF,  0xF70867153AA2DB39, +1083 },  // 1.0e-309
    { 0x000730D67819E8D3,  0xC5A05277621BE294, +1080 },  // 1.0e-308
    { 0x0031FA182C40C60E,  0x9E19DB92B4E31BAA, +1077 },  // 1.0e-307
    { 0x0066789E3750F791,  0xFCF62C1DEE382C43, +1073 },  // 1.0e-306
    { 0x009C16C5C5253576,  0xCA5E89B18B602369, +1070 },  // 1.0e-305
    { 0x00D18E3B9B37416A,  0xA1E53AF46F801C54, +1067 },  // 1.0e-304
    { 0x0105F1CA820511C4,  0x81842F29F2CCE376, +1064 },  // 1.0e-303
    { 0x013B6E3D22865635,  0xCF39E50FEAE16BF0, +1060 },  // 1.0e-302
    { 0x017124E63593F5E1,  0xA5C7EA73224DEFF4, +1057 },  // 1.0e-301
    { 0x01A56E1FC2F8F359,  0x849FEEC281D7F329, +1054 },  // 1.0e-300
    { 0x01DAC9A7B3B73030,  0xD433179D9C8CB842, +1050 },  // 1.0e-299
    { 0x0210BE08D0527E1E,  0xA9C2794AE3A3C69B, +1047 },  // 1.0e-298
    { 0x0244ED8B04671DA5,  0x87CEC76F1C830549, +1044 },  // 1.0e-297
    { 0x027A28EDC580E50E,  0xD94AD8B1C7380875, +1040 },  // 1.0e-296
    { 0x02B059949B708F29,  0xADD57A27D29339F7, +1037 },  // 1.0e-295
    { 0x02E46FF9C24CB2F3,  0x8B112E86420F6192, +1034 },  // 1.0e-294
    { 0x03198BF832DFDFB0,  0xDE81E40A034BCF50, +1030 },  // 1.0e-293
    { 0x034FEEF63F97D79C,  0xB201833B35D63F74, +1027 },  // 1.0e-292
    { 0x0383F559E7BEE6C2,  0x8E679C2F5E44FF90, +1024 },  // 1.0e-291
    { 0x03B8F2B061AEA072,  0xE3D8F9E563A198E6, +1020 },  // 1.0e-290
    { 0x03EF2F5C7A1A488E,  0xB6472E511C81471E, +1017 },  // 1.0e-289
    { 0x04237D99CC506D59,  0x91D28B7416CDD27F, +1014 },  // 1.0e-288
    { 0x04585D003F6488AF,  0xE950DF20247C83FE, +1010 },  // 1.0e-287
    { 0x048E74404F3DAADB,  0xBAA718E68396CFFE, +1007 },  // 1.0e-286
    { 0x04C308A831868AC9,  0x95527A5202DF0CCC, +1004 },  // 1.0e-285
    { 0x04F7CAD23DE82D7B,  0xEEEA5D5004981479, +1000 },  // 1.0e-284
    { 0x052DBD86CD6238DA,  0xBF21E44003ACDD2D,  +997 },  // 1.0e-283
    { 0x05629674405D6388,  0x98E7E9CCCFBD7DBE,  +994 },  // 1.0e-282
    { 0x05973C115074BC6A,  0xF4A642E14C6262C9,  +990 },  // 1.0e-281
    { 0x05CD0B15A491EB85,  0xC3B8358109E84F08,  +987 },  // 1.0e-280
    { 0x060226ED86DB3333,  0x9C935E00D4B9D8D3,  +984 },  // 1.0e-279
    { 0x0636B0A8E8920000,  0xFA856334878FC151,  +980 },  // 1.0e-278
    { 0x066C5CD322B68000,  0xC86AB5C39FA63441,  +977 },  // 1.0e-277
    { 0x06A1BA03F5B21000,  0xA0555E361951C367,  +974 },  // 1.0e-276
    { 0x06D62884F31E9400,  0x80444B5E7AA7CF86,  +971 },  // 1.0e-275
    { 0x070BB2A62FE63900,  0xCD3A1230C43FB270,  +967 },  // 1.0e-274
    { 0x07414FA7DDEFE3A0,  0xA42E74F3D032F526,  +964 },  // 1.0e-273
    { 0x0775A391D56BDC88,  0x83585D8FD9C25DB8,  +961 },  // 1.0e-272
    { 0x07AB0C764AC6D3AA,  0xD226FC195C6A2F8D,  +957 },  // 1.0e-271
    { 0x07E0E7C9EEBC444A,  0xA81F301449EE8C71,  +954 },  // 1.0e-270
    { 0x081521BC6A6B555D,  0x867F59A9D4BED6C1,  +951 },  // 1.0e-269
    { 0x084A6A2B85062AB4,  0xD732290FBACAF134,  +947 },  // 1.0e-268
    { 0x0880825B3323DAB1,  0xAC2820D9623BF42A,  +944 },  // 1.0e-267
    { 0x08B4A2F1FFECD15D,  0x89B9B3E11B6329BB,  +941 },  // 1.0e-266
    { 0x08E9CBAE7FE805B4,  0xDC5C5301C56B75F8,  +937 },  // 1.0e-265
    { 0x09201F4D0FF10390,  0xB049DC016ABC5E60,  +934 },  // 1.0e-264
    { 0x0954272053ED4474,  0x8D07E33455637EB3,  +931 },  // 1.0e-263
    { 0x098930E868E89591,  0xE1A63853BBD26452,  +927 },  // 1.0e-262
    { 0x09BF7D228322BAF6,  0xB484F9DC9641E9DB,  +924 },  // 1.0e-261
    { 0x09F3AE3591F5B4DA,  0x906A617D450187E3,  +921 },  // 1.0e-260
    { 0x0A2899C2F6732210,  0xE7109BFBA19C0C9E,  +917 },  // 1.0e-259
    { 0x0A5EC033B40FEA94,  0xB8DA1662E7B00A18,  +914 },  // 1.0e-258
    { 0x0A9338205089F29D,  0x93E1AB8252F33B46,  +911 },  // 1.0e-257
    { 0x0AC8062864AC6F44,  0xEC9C459D51852BA3,  +907 },  // 1.0e-256
    { 0x0AFE07B27DD78B14,  0xBD49D14AA79DBC83,  +904 },  // 1.0e-255
    { 0x0B32C4CF8EA6B6ED,  0x976E41088617CA02,  +901 },  // 1.0e-254
    { 0x0B677603725064A8,  0xF24A01A73CF2DCD0,  +897 },  // 1.0e-253
    { 0x0B9D53844EE47DD2,  0xC1D4CE1F63F57D73,  +894 },  // 1.0e-252
    { 0x0BD25432B14ECEA3,  0x9B10A4E5E9913129,  +891 },  // 1.0e-251
    { 0x0C06E93F5DA2824C,  0xF81AA16FDC1B81DB,  +887 },  // 1.0e-250
    { 0x0C3CA38F350B22DF,  0xC67BB4597CE2CE49,  +884 },  // 1.0e-249
    { 0x0C71E6398126F5CC,  0x9EC95D1463E8A507,  +881 },  // 1.0e-248
    { 0x0CA65FC7E170B33E,  0xFE0EFB53D30DD4D8,  +877 },  // 1.0e-247
    { 0x0CDBF7B9D9CCE00E,  0xCB3F2F7642717714,  +874 },  // 1.0e-246
    { 0x0D117AD428200C09,  0xA298F2C501F45F43,  +871 },  // 1.0e-245
    { 0x0D45D98932280F0B,  0x8213F56A67F6B29C,  +868 },  // 1.0e-244
    { 0x0D7B4FEB7EB212CE,  0xD01FEF10A657842D,  +864 },  // 1.0e-243
    { 0x0DB111F32F2F4BC1,  0xA67FF273B8460357,  +861 },  // 1.0e-242
    { 0x0DE5566FFAFB1EB1,  0x8533285C936B35DF,  +858 },  // 1.0e-241
    { 0x0E1AAC0BF9B9E65D,  0xD51EA6FA85785632,  +854 },  // 1.0e-240
    { 0x0E50AB877C142FFA,  0xAA7EEBFB9DF9DE8E,  +851 },  // 1.0e-239
    { 0x0E84D6695B193BF9,  0x8865899617FB1872,  +848 },  // 1.0e-238
    { 0x0EBA0C03B1DF8AF7,  0xDA3C0F568CC4F3E9,  +844 },  // 1.0e-237
    { 0x0EF047824F2BB6DA,  0xAE9672ABA3D0C321,  +841 },  // 1.0e-236
    { 0x0F245962E2F6A491,  0x8BAB8EEFB6409C1B,  +838 },  // 1.0e-235
    { 0x0F596FBB9BB44DB5,  0xDF78E4B2BD342CF7,  +834 },  // 1.0e-234
    { 0x0F8FCBAA82A16122,  0xB2C71D5BCA9023F9,  +831 },  // 1.0e-233
    { 0x0FC3DF4A91A4DCB5,  0x8F05B1163BA6832E,  +828 },  // 1.0e-232
    { 0x0FF8D71D360E13E3,  0xE4D5E82392A40516,  +824 },  // 1.0e-231
    { 0x102F0CE4839198DB,  0xB7118682DBB66A78,  +821 },  // 1.0e-230
    { 0x1063680ED23AFF89,  0x92746B9BE2F8552D,  +818 },  // 1.0e-229
    { 0x1098421286C9BF6B,  0xEA53DF5FD18D5514,  +814 },  // 1.0e-228
    { 0x10CE5297287C2F46,  0xBB764C4CA7A44410,  +811 },  // 1.0e-227
    { 0x1102F39E794D9D8C,  0x95F83D0A1FB69CDA,  +808 },  // 1.0e-226
    { 0x1137B08617A104EF,  0xEFF394DCFF8A948F,  +804 },  // 1.0e-225
    { 0x116D9CA79D89462A,  0xBFF610B0CC6EDD40,  +801 },  // 1.0e-224
    { 0x11A281E8C275CBDB,  0x9991A6F3D6BF1766,  +798 },  // 1.0e-223
    { 0x11D72262F3133ED1,  0xF5B5D7EC8ACB58A3,  +794 },  // 1.0e-222
    { 0x120CEAFBAFD80E85,  0xC491798A08A2AD4F,  +791 },  // 1.0e-221
    { 0x124212DD4DE70914,  0x9D412E0806E88AA6,  +788 },  // 1.0e-220
    { 0x12769794A160CB58,  0xFB9B7CD9A4A7443D,  +784 },  // 1.0e-219
    { 0x12AC3D79C9B8FE2E,  0xC94930AE1D529CFD,  +781 },  // 1.0e-218
    { 0x12E1A66C1E139EDD,  0xA1075A24E4421731,  +778 },  // 1.0e-217
    { 0x1316100725988694,  0x80D2AE83E9CE78F4,  +775 },  // 1.0e-216
    { 0x134B9408EEFEA839,  0xCE1DE40642E3F4BA,  +771 },  // 1.0e-215
    { 0x13813C85955F2924,  0xA4E4B66B68B65D61,  +768 },  // 1.0e-214
    { 0x13B58BA6FAB6F36D,  0x83EA2B892091E44E,  +765 },  // 1.0e-213
    { 0x13EAEE90B964B048,  0xD31045A8341CA07D,  +761 },  // 1.0e-212
    { 0x1420D51A73DEEE2D,  0xA8D9D1535CE3B397,  +758 },  // 1.0e-211
    { 0x14550A6110D6A9B8,  0x8714A775E3E95C79,  +755 },  // 1.0e-210
    { 0x148A4CF9550C5426,  0xD8210BEFD30EFA5B,  +751 },  // 1.0e-209
    { 0x14C0701BD527B498,  0xACE73CBFDC0BFB7C,  +748 },  // 1.0e-208
    { 0x14F48C22CA71A1BE,  0x8A5296FFE33CC930,  +745 },  // 1.0e-207
    { 0x1529AF2B7D0E0A2D,  0xDD50F1996B947519,  +741 },  // 1.0e-206
    { 0x15600D7B2E28C65C,  0xB10D8E1456105DAE,  +738 },  // 1.0e-205
    { 0x159410D9F9B2F7F3,  0x8DA471A9DE737E25,  +735 },  // 1.0e-204
    { 0x15C91510781FB5F0,  0xE2A0B5DC971F303B,  +731 },  // 1.0e-203
    { 0x15FF5A549627A36C,  0xB54D5E4A127F59C9,  +728 },  // 1.0e-202
    { 0x16339874DDD8C624,  0x910AB1D4DB9914A1,  +725 },  // 1.0e-201
    { 0x16687E92154EF7AD,  0xE8111C87C5C1BA9A,  +721 },  // 1.0e-200
    { 0x169E9E369AA2B598,  0xB9A74A0637CE2EE2,  +718 },  // 1.0e-199
    { 0x16D322E220A5B17F,  0x9485D4D1C63E8BE8,  +715 },  // 1.0e-198
    { 0x1707EB9AA8CF1DDF,  0xEDA2EE1C7064130D,  +711 },  // 1.0e-197
    { 0x173DE6815302E556,  0xBE1BF1B059E9A8D7,  +708 },  // 1.0e-196
    { 0x1772B010D3E1CF56,  0x98165AF37B2153DF,  +705 },  // 1.0e-195
    { 0x17A75C1508DA432B,  0xF356F7EBF83552FF,  +701 },  // 1.0e-194
    { 0x17DD331A4B10D3F6,  0xC2ABF989935DDBFF,  +698 },  // 1.0e-193
    { 0x18123FF06EEA847A,  0x9BBCC7A142B17CCC,  +695 },  // 1.0e-192
    { 0x1846CFEC8AA52598,  0xF92E0C3537826146,  +691 },  // 1.0e-191
    { 0x187C83E7AD4E6EFE,  0xC75809C42C684DD2,  +688 },  // 1.0e-190
    { 0x18B1D270CC51055F,  0x9F79A169BD203E42,  +685 },  // 1.0e-189
    { 0x18E6470CFF6546B7,  0xFF290242C83396CF,  +681 },  // 1.0e-188
    { 0x191BD8D03F3E9864,  0xCC20CE9BD35C78A6,  +678 },  // 1.0e-187
    { 0x1951678227871F3F,  0xA34D721642B06085,  +675 },  // 1.0e-186
    { 0x1985C162B168E70F,  0x82A45B450226B39D,  +672 },  // 1.0e-185
    { 0x19BB31BB5DC320D2,  0xD106F86E69D785C8,  +668 },  // 1.0e-184
    { 0x19F0FF151A99F483,  0xA738C6BEBB12D16D,  +665 },  // 1.0e-183
    { 0x1A253EDA614071A4,  0x85C7056562757457,  +662 },  // 1.0e-182
    { 0x1A5A8E90F9908E0D,  0xD60B3BD56A5586F2,  +658 },  // 1.0e-181
    { 0x1A90991A9BFA58C8,  0xAB3C2FDDEEAAD25B,  +655 },  // 1.0e-180
    { 0x1AC4BF6142F8EEFA,  0x88FCF317F22241E3,  +652 },  // 1.0e-179
    { 0x1AF9EF3993B72AB9,  0xDB2E51BFE9D0696B,  +648 },  // 1.0e-178
    { 0x1B303583FC527AB4,  0xAF58416654A6BABC,  +645 },  // 1.0e-177
    { 0x1B6442E4FB671961,  0x8C469AB843B89563,  +642 },  // 1.0e-176
    { 0x1B99539E3A40DFB9,  0xE070F78D3927556B,  +638 },  // 1.0e-175
    { 0x1BCFA885C8D117A7,  0xB38D92D760EC4456,  +635 },  // 1.0e-174
    { 0x1C03C9539D82AEC8,  0x8FA475791A569D11,  +632 },  // 1.0e-173
    { 0x1C38BBA884E35A7A,  0xE5D3EF282A242E82,  +628 },  // 1.0e-172
    { 0x1C6EEA92A61C3119,  0xB7DCBF5354E9BECF,  +625 },  // 1.0e-171
    { 0x1CA3529BA7D19EB0,  0x9316FF75DD87CBD9,  +622 },  // 1.0e-170
    { 0x1CD8274291C6065B,  0xEB57FF22FC0C795A,  +618 },  // 1.0e-169
    { 0x1D0E3113363787F2,  0xBC4665B596706115,  +615 },  // 1.0e-168
    { 0x1D42DEAC01E2B4F7,  0x969EB7C47859E744,  +612 },  // 1.0e-167
    { 0x1D779657025B6235,  0xF0FDF2D3F3C30BA0,  +608 },  // 1.0e-166
    { 0x1DAD7BECC2F23AC2,  0xC0CB28A98FCF3C80,  +605 },  // 1.0e-165
    { 0x1DE26D73F9D764BA,  0x9A3C2087A63F639A,  +602 },  // 1.0e-164
    { 0x1E1708D0F84D3DE8,  0xF6C69A72A3989F5C,  +598 },  // 1.0e-163
    { 0x1E4CCB0536608D62,  0xC56BAEC21C7A1917,  +595 },  // 1.0e-162
    { 0x1E81FEE341FC585D,  0x9DEFBF01B061ADAC,  +592 },  // 1.0e-161
    { 0x1EB67E9C127B6E75,  0xFCB2CB35E702AF79,  +588 },  // 1.0e-160
    { 0x1EEC1E43171A4A12,  0xCA28A291859BBF94,  +585 },  // 1.0e-159
    { 0x1F2192E9EE706E4B,  0xA1BA1BA79E1632DD,  +582 },  // 1.0e-158
    { 0x1F55F7A46A0C89DE,  0x8161AFB94B44F57E,  +579 },  // 1.0e-157
    { 0x1F8B758D848FAC55,  0xCF02B2C21207EF2F,  +575 },  // 1.0e-156
    { 0x1FC1297872D9CBB5,  0xA59BC234DB398C26,  +572 },  // 1.0e-155
    { 0x1FF573D68F903EA3,  0x847C9B5D7C2E09B8,  +569 },  // 1.0e-154
    { 0x202AD0CC33744E4B,  0xD3FA922F2D1675F3,  +565 },  // 1.0e-153
    { 0x2060C27FA028B0EF,  0xA99541BF57452B29,  +562 },  // 1.0e-152
    { 0x2094F31F8832DD2B,  0x87AA9AFF79042287,  +559 },  // 1.0e-151
    { 0x20CA2FE76A3F9475,  0xD910F7FF28069DA5,  +555 },  // 1.0e-150
    { 0x21005DF0A267BCCA,  0xADA72CCC20054AEA,  +552 },  // 1.0e-149
    { 0x2134756CCB01ABFC,  0x8AEC23D680043BEF,  +549 },  // 1.0e-148
    { 0x216992C7FDC216FB,  0xDE469FBD99A05FE4,  +545 },  // 1.0e-147
    { 0x219FF779FD329CB9,  0xB1D219647AE6B31D,  +542 },  // 1.0e-146
    { 0x21D3FAAC3E3FA1F4,  0x8E41ADE9FBEBC27E,  +539 },  // 1.0e-145
    { 0x2208F9574DCF8A71,  0xE39C49765FDF9D95,  +535 },  // 1.0e-144
    { 0x223F37AD21436D0D,  0xB616A12B7FE617AB,  +532 },  // 1.0e-143
    { 0x227382CC34CA2428,  0x91ABB422CCB812EF,  +529 },  // 1.0e-142
    { 0x22A8637F41FCAD32,  0xE912B9D1478CEB18,  +525 },  // 1.0e-141
    { 0x22DE7C5F127BD87F,  0xBA756174393D88E0,  +522 },  // 1.0e-140
    { 0x23130DBB6B8D674F,  0x952AB45CFA97A0B3,  +519 },  // 1.0e-139
    { 0x2347D12A4670C123,  0xEEAABA2E5DBF6785,  +515 },  // 1.0e-138
    { 0x237DC574D80CF16C,  0xBEEEFB584AFF8604,  +512 },  // 1.0e-137
    { 0x23B29B69070816E3,  0x98BF2F79D5993803,  +509 },  // 1.0e-136
    { 0x23E7424348CA1C9C,  0xF46518C2EF5B8CD2,  +505 },  // 1.0e-135
    { 0x241D12D41AFCA3C3,  0xC38413CF25E2D70E,  +502 },  // 1.0e-134
    { 0x24522BC490DDE65A,  0x9C69A97284B578D8,  +499 },  // 1.0e-133
    { 0x2486B6B5B5155FF1,  0xFA42A8B73ABBF48D,  +495 },  // 1.0e-132
    { 0x24BC6463225AB7ED,  0xC83553C5C8965D3E,  +492 },  // 1.0e-131
    { 0x24F1BEBDF578B2F4,  0xA02AA96B06DEB0FE,  +489 },  // 1.0e-130
    { 0x25262E6D72D6DFB1,  0x802221226BE55A65,  +486 },  // 1.0e-129
    { 0x255BBA08CF8C979D,  0xCD036837130890A2,  +482 },  // 1.0e-128
    { 0x2591544581B7DEC2,  0xA402B9C5A8D3A6E8,  +479 },  // 1.0e-127
    { 0x25C5A956E225D673,  0x8335616AED761F20,  +476 },  // 1.0e-126
    { 0x25FB13AC9AAF4C0F,  0xD1EF0244AF236500,  +472 },  // 1.0e-125
    { 0x2630EC4BE0AD8F8A,  0xA7F26836F282B733,  +469 },  // 1.0e-124
    { 0x2665275ED8D8F36C,  0x865B86925B9BC5C3,  +466 },  // 1.0e-123
    { 0x269A71368F0F3047,  0xD6F8D7509292D604,  +462 },  // 1.0e-122
    { 0x26D086C219697E2D,  0xABFA45DA0EDBDE6A,  +459 },  // 1.0e-121
    { 0x2704A8729FC3DDB8,  0x899504AE72497EBB,  +456 },  // 1.0e-120
    { 0x2739D28F47B4D525,  0xDC21A1171D42645E,  +452 },  // 1.0e-119
    { 0x277023998CD10538,  0xB01AE745B101E9E5,  +449 },  // 1.0e-118
    { 0x27A42C7FF0054685,  0x8CE2529E2734BB1E,  +446 },  // 1.0e-117
    { 0x27D9379FEC069827,  0xE16A1DC9D8545E95,  +442 },  // 1.0e-116
    { 0x280F8587E7083E30,  0xB454E4A179DD1878,  +439 },  // 1.0e-115
    { 0x2843B374F06526DE,  0x9043EA1AC7E41393,  +436 },  // 1.0e-114
    { 0x2878A0522C7E7096,  0xE6D3102AD96CEC1E,  +432 },  // 1.0e-113
    { 0x28AEC866B79E0CBB,  0xB8A8D9BBE123F018,  +429 },  // 1.0e-112
    { 0x28E33D4032C2C7F5,  0x93BA47C980E98CE0,  +426 },  // 1.0e-111
    { 0x29180C903F7379F2,  0xEC5D3FA8CE427B00,  +422 },  // 1.0e-110
    { 0x294E0FB44F50586F,  0xBD176620A501FC00,  +419 },  // 1.0e-109
    { 0x2982C9D0B1923745,  0x9745EB4D50CE6333,  +416 },  // 1.0e-108
    { 0x29B77C44DDF6C516,  0xF209787BB47D6B85,  +412 },  // 1.0e-107
    { 0x29ED5B561574765C,  0xC1A12D2FC3978938,  +409 },  // 1.0e-106
    { 0x2A225915CD68C9FA,  0x9AE7575969460760,  +406 },  // 1.0e-105
    { 0x2A56EF5B40C2FC78,  0xF7D88BC24209A566,  +402 },  // 1.0e-104
    { 0x2A8CAB3210F3BB96,  0xC646D63501A1511E,  +399 },  // 1.0e-103
    { 0x2AC1EAFF4A98553E,  0x9E9F11C4014DDA7F,  +396 },  // 1.0e-102
    { 0x2AF665BF1D3E6A8D,  0xFDCB4FA002162A64,  +392 },  // 1.0e-101
    { 0x2B2BFF2EE48E0530,  0xCB090C8001AB551D,  +389 },  // 1.0e-100
    { 0x2B617F7D4ED8C33E,  0xA26DA3999AEF774A,  +386 },  // 1.0e-099
    { 0x2B95DF5CA28EF40E,  0x81F14FAE158C5F6F,  +383 },  // 1.0e-098
    { 0x2BCB5733CB32B111,  0xCFE87F7CEF46FF17,  +379 },  // 1.0e-097
    { 0x2C0116805EFFAEAB,  0xA6539930BF6BFF46,  +376 },  // 1.0e-096
    { 0x2C355C2076BF9A56,  0x850FADC09923329F,  +373 },  // 1.0e-095
    { 0x2C6AB328946F80EB,  0xD4E5E2CDC1D1EA97,  +369 },  // 1.0e-094
    { 0x2CA0AFF95CC5B093,  0xAA51823E34A7EEDF,  +366 },  // 1.0e-093
    { 0x2CD4DBF7B3F71CB8,  0x884134FE908658B3,  +363 },  // 1.0e-092
    { 0x2D0A12F5A0F4E3E5,  0xDA01EE641A708DEA,  +359 },  // 1.0e-091
    { 0x2D404BD984990E70,  0xAE67F1E9AEC07188,  +356 },  // 1.0e-090
    { 0x2D745ECFE5BF520B,  0x8B865B215899F46D,  +353 },  // 1.0e-089
    { 0x2DA97683DF2F268E,  0xDF3D5E9BC0F653E2,  +349 },  // 1.0e-088
    { 0x2DDFD424D6FAF031,  0xB2977EE300C50FE8,  +346 },  // 1.0e-087
    { 0x2E13E497065CD61F,  0x8EDF98B59A373FED,  +343 },  // 1.0e-086
    { 0x2E48DDBCC7F40BA7,  0xE498F455C38B997B,  +339 },  // 1.0e-085
    { 0x2E7F152BF9F10E90,  0xB6E0C377CFA2E12F,  +336 },  // 1.0e-084
    { 0x2EB36D3B7C36A91A,  0x924D692CA61BE759,  +333 },  // 1.0e-083
    { 0x2EE8488A5B445361,  0xEA1575143CF97227,  +329 },  // 1.0e-082
    { 0x2F1E5AACF2156839,  0xBB445DA9CA612820,  +326 },  // 1.0e-081
    { 0x2F52F8AC174D6124,  0x95D04AEE3B80ECE6,  +323 },  // 1.0e-080
    { 0x2F87B6D71D20B96D,  0xEFB3AB16C59B14A3,  +319 },  // 1.0e-079
    { 0x2FBDA48CE468E7C8,  0xBFC2EF456AE276E9,  +316 },  // 1.0e-078
    { 0x2FF286D80EC190DD,  0x9968BF6ABBE85F21,  +313 },  // 1.0e-077
    { 0x3027288E1271F514,  0xF5746577930D6501,  +309 },  // 1.0e-076
    { 0x305CF2B1970E7259,  0xC45D1DF942711D9B,  +306 },  // 1.0e-075
    { 0x309217AEFE690778,  0x9D174B2DCEC0E47C,  +303 },  // 1.0e-074
    { 0x30C69D9ABE034956,  0xFB5878494ACE3A60,  +299 },  // 1.0e-073
    { 0x30FC45016D841BAB,  0xC913936DD571C84D,  +296 },  // 1.0e-072
    { 0x3131AB20E472914B,  0xA0DC75F1778E39D7,  +293 },  // 1.0e-071
    { 0x316615E91D8F359E,  0x80B05E5AC60B6179,  +290 },  // 1.0e-070
    { 0x319B9B6364F30305,  0xCDE6FD5E09ABCF27,  +286 },  // 1.0e-069
    { 0x31D1411E1F17E1E3,  0xA4B8CAB1A1563F53,  +283 },  // 1.0e-068
    { 0x32059165A6DDDA5C,  0x83C7088E1AAB65DC,  +280 },  // 1.0e-067
    { 0x323AF5BF109550F3,  0xD2D80DB02AABD62C,  +276 },  // 1.0e-066
    { 0x3270D9976A5D5298,  0xA8ACD7C0222311BD,  +273 },  // 1.0e-065
    { 0x32A50FFD44F4A73E,  0x86F0AC99B4E8DAFE,  +270 },  // 1.0e-064
    { 0x32DA53FC9631D10D,  0xD7E77A8F87DAF7FC,  +266 },  // 1.0e-063
    { 0x3310747DDDDF22A8,  0xACB92ED9397BF997,  +263 },  // 1.0e-062
    { 0x3344919D5556EB52,  0x8A2DBF142DFCC7AC,  +260 },  // 1.0e-061
    { 0x3379B604AAACA627,  0xDD15FE86AFFAD913,  +256 },  // 1.0e-060
    { 0x33B011C2EAABE7D8,  0xB0DE65388CC8ADA9,  +253 },  // 1.0e-059
    { 0x33E41633A556E1CE,  0x8D7EB76070A08AED,  +250 },  // 1.0e-058
    { 0x34191BC08EAC9A42,  0xE264589A4DCDAB15,  +246 },  // 1.0e-057
    { 0x344F62B0B257C0D2,  0xB51D13AEA4A488DE,  +243 },  // 1.0e-056
    { 0x34839DAE6F76D884,  0x90E40FBEEA1D3A4B,  +240 },  // 1.0e-055
    { 0x34B8851A0B548EA4,  0xE7D34C64A9C85D45,  +236 },  // 1.0e-054
    { 0x34EEA6608E29B24D,  0xB975D6B6EE39E437,  +233 },  // 1.0e-053
    { 0x352327FC58DA0F70,  0x945E455F24FB1CF9,  +230 },  // 1.0e-052
    { 0x3557F1FB6F10934C,  0xED63A231D4C4FB28,  +226 },  // 1.0e-051
    { 0x358DEE7A4AD4B81F,  0xBDE94E8E43D0C8ED,  +223 },  // 1.0e-050
    { 0x35C2B50C6EC4F314,  0x97EDD871CFDA3A57,  +220 },  // 1.0e-049
    { 0x35F7624F8A762FD9,  0xF316271C7FC3908B,  +216 },  // 1.0e-048
    { 0x362D3AE36D13BBCF,  0xC2781F49FFCFA6D6,  +213 },  // 1.0e-047
    { 0x366244CE242C5561,  0x9B934C3B330C8578,  +210 },  // 1.0e-046
    { 0x3696D601AD376ABA,  0xF8EBAD2B84E0D58C,  +206 },  // 1.0e-045
    { 0x36CC8B8218854568,  0xC722F0EF9D80AAD7,  +203 },  // 1.0e-044
    { 0x3701D7314F534B61,  0x9F4F2726179A2246,  +200 },  // 1.0e-043
    { 0x37364CFDA3281E39,  0xFEE50B7025C36A09,  +196 },  // 1.0e-042
    { 0x376BE03D0BF225C7,  0xCBEA6F8CEB02BB3A,  +193 },  // 1.0e-041
    { 0x37A16C262777579D,  0xA321F2D7226895C8,  +190 },  // 1.0e-040
    { 0x37D5C72FB1552D84,  0x82818F1281ED44A0,  +187 },  // 1.0e-039
    { 0x380B38FB9DAA78E5,  0xD0CF4B50CFE20766,  +183 },  // 1.0e-038
    { 0x3841039D428A8B8F,  0xA70C3C40A64E6C52,  +180 },  // 1.0e-037
    { 0x38754484932D2E73,  0x85A36366EB71F042,  +177 },  // 1.0e-036
    { 0x38AA95A5B7F87A0F,  0xD5D238A4ABE98069,  +173 },  // 1.0e-035
    { 0x38E09D8792FB4C4A,  0xAB0E93B6EFEE0054,  +170 },  // 1.0e-034
    { 0x3914C4E977BA1F5C,  0x88D8762BF324CD10,  +167 },  // 1.0e-033
    { 0x3949F623D5A8A733,  0xDAF3F04651D47B4D,  +163 },  // 1.0e-032
    { 0x398039D665896880,  0xAF298D050E4395D7,  +160 },  // 1.0e-031
    { 0x39B4484BFEEBC2A0,  0x8C213D9DA502DE46,  +157 },  // 1.0e-030
    { 0x39E95A5EFEA6B348,  0xE0352F62A19E306F,  +153 },  // 1.0e-029
    { 0x3A1FB0F6BE50601A,  0xB35DBF821AE4F38C,  +150 },  // 1.0e-028
    { 0x3A53CE9A36F23C10,  0x8F7E32CE7BEA5C70,  +147 },  // 1.0e-027
    { 0x3A88C240C4AECB14,  0xE596B7B0C643C71A,  +143 },  // 1.0e-026
    { 0x3ABEF2D0F5DA7DD9,  0xB7ABC627050305AE,  +140 },  // 1.0e-025
    { 0x3AF357C299A88EA8,  0x92EFD1B8D0CF37BF,  +137 },  // 1.0e-024
    { 0x3B282DB34012B252,  0xEB194F8E1AE525FE,  +133 },  // 1.0e-023
    { 0x3B5E392010175EE6,  0xBC143FA4E250EB32,  +130 },  // 1.0e-022
    { 0x3B92E3B40A0E9B50,  0x96769950B50D88F5,  +127 },  // 1.0e-021
    { 0x3BC79CA10C924224,  0xF0BDC21ABB48DB21,  +123 },  // 1.0e-020
    { 0x3BFD83C94FB6D2AD,  0xC097CE7BC90715B4,  +120 },  // 1.0e-019
    { 0x3C32725DD1D243AC,  0x9A130B963A6C115D,  +117 },  // 1.0e-018
    { 0x3C670EF54646D497,  0xF684DF56C3E01BC7,  +113 },  // 1.0e-017
    { 0x3C9CD2B297D889BD,  0xC5371912364CE306,  +110 },  // 1.0e-016
    { 0x3CD203AF9EE75616,  0x9DC5ADA82B70B59E,  +107 },  // 1.0e-015
    { 0x3D06849B86A12B9C,  0xFC6F7C4045812297,  +103 },  // 1.0e-014
    { 0x3D3C25C268497682,  0xC9F2C9CD04674EDF,  +100 },  // 1.0e-013
    { 0x3D719799812DEA12,  0xA18F07D736B90BE6,   +97 },  // 1.0e-012
    { 0x3DA5FD7FE1796496,  0x813F3978F8940985,   +94 },  // 1.0e-011
    { 0x3DDB7CDFD9D7BDBB,  0xCECB8F27F4200F3B,   +90 },  // 1.0e-010
    { 0x3E112E0BE826D695,  0xA56FA5B99019A5C8,   +87 },  // 1.0e-009
    { 0x3E45798EE2308C3A,  0x84595161401484A0,   +84 },  // 1.0e-008
    { 0x3E7AD7F29ABCAF49,  0xD3C21BCECCEDA100,   +80 },  // 1.0e-007
    { 0x3EB0C6F7A0B5ED8E,  0xA968163F0A57B400,   +77 },  // 1.0e-006
    { 0x3EE4F8B588E368F1,  0x878678326EAC9000,   +74 },  // 1.0e-005
    { 0x3F1A36E2EB1C432D,  0xD8D726B7177A8000,   +70 },  // 1.0e-004
    { 0x3F50624DD2F1A9FC,  0xAD78EBC5AC620000,   +67 },  // 1.0e-003
    { 0x3F847AE147AE147B,  0x8AC7230489E80000,   +64 },  // 1.0e-002
    { 0x3FB999999999999A,  0xDE0B6B3A76400000,   +60 },  // 1.0e-001
    { 0x3FF0000000000000,  0xB1A2BC2EC5000000,   +57 },  // 1.0e+000
    { 0x4024000000000000,  0x8E1BC9BF04000000,   +54 },  // 1.0e+001
    { 0x4059000000000000,  0xE35FA931A0000000,   +50 },  // 1.0e+002
    { 0x408F400000000000,  0xB5E620F480000000,   +47 },  // 1.0e+003
    { 0x40C3880000000000,  0x9184E72A00000000,   +44 },  // 1.0e+004
    { 0x40F86A0000000000,  0xE8D4A51000000000,   +40 },  // 1.0e+005
    { 0x412E848000000000,  0xBA43B74000000000,   +37 },  // 1.0e+006
    { 0x416312D000000000,  0x9502F90000000000,   +34 },  // 1.0e+007
    { 0x4197D78400000000,  0xEE6B280000000000,   +30 },  // 1.0e+008
    { 0x41CDCD6500000000,  0xBEBC200000000000,   +27 },  // 1.0e+009
    { 0x4202A05F20000000,  0x9896800000000000,   +24 },  // 1.0e+010
    { 0x42374876E8000000,  0xF424000000000000,   +20 },  // 1.0e+011
    { 0x426D1A94A2000000,  0xC350000000000000,   +17 },  // 1.0e+012
    { 0x42A2309CE5400000,  0x9C40000000000000,   +14 },  // 1.0e+013
    { 0x42D6BCC41E900000,  0xFA00000000000000,   +10 },  // 1.0e+014
    { 0x430C6BF526340000,  0xC800000000000000,    +7 },  // 1.0e+015
    { 0x4341C37937E08000,  0xA000000000000000,    +4 },  // 1.0e+016
    { 0x4376345785D8A000,  0x8000000000000000,    +1 },  // 1.0e+017
    { 0x43ABC16D674EC800,  0xCCCCCCCCCCCCCCCD,    -3 },  // 1.0e+018
    { 0x43E158E460913D00,  0xA3D70A3D70A3D70B,    -6 },  // 1.0e+019
    { 0x4415AF1D78B58C40,  0x83126E978D4FDF3C,    -9 },  // 1.0e+020
    { 0x444B1AE4D6E2EF50,  0xD1B71758E219652C,   -13 },  // 1.0e+021
    { 0x4480F0CF064DD592,  0xA7C5AC471B478424,   -16 },  // 1.0e+022
    { 0x44B52D02C7E14AF7,  0x8637BD05AF6C69B6,   -19 },  // 1.0e+023
    { 0x44EA784379D99DB5,  0xD6BF94D5E57A42BD,   -23 },  // 1.0e+024
    { 0x45208B2A2C280291,  0xABCC77118461CEFD,   -26 },  // 1.0e+025
    { 0x4554ADF4B7320335,  0x89705F4136B4A598,   -29 },  // 1.0e+026
    { 0x4589D971E4FE8402,  0xDBE6FECEBDEDD5BF,   -33 },  // 1.0e+027
    { 0x45C027E72F1F1282,  0xAFEBFF0BCB24AAFF,   -36 },  // 1.0e+028
    { 0x45F431E0FAE6D722,  0x8CBCCC096F5088CC,   -39 },  // 1.0e+029
    { 0x46293E5939A08CEA,  0xE12E13424BB40E14,   -43 },  // 1.0e+030
    { 0x465F8DEF8808B025,  0xB424DC35095CD810,   -46 },  // 1.0e+031
    { 0x4693B8B5B5056E17,  0x901D7CF73AB0ACDA,   -49 },  // 1.0e+032
    { 0x46C8A6E32246C99D,  0xE69594BEC44DE15C,   -53 },  // 1.0e+033
    { 0x46FED09BEAD87C04,  0xB877AA3236A4B44A,   -56 },  // 1.0e+034
    { 0x4733426172C74D83,  0x9392EE8E921D5D08,   -59 },  // 1.0e+035
    { 0x476812F9CF7920E3,  0xEC1E4A7DB69561A6,   -63 },  // 1.0e+036
    { 0x479E17B84357691C,  0xBCE5086492111AEB,   -66 },  // 1.0e+037
    { 0x47D2CED32A16A1B2,  0x971DA05074DA7BEF,   -69 },  // 1.0e+038
    { 0x48078287F49C4A1E,  0xF1C90080BAF72CB2,   -73 },  // 1.0e+039
    { 0x483D6329F1C35CA5,  0xC16D9A0095928A28,   -76 },  // 1.0e+040
    { 0x48725DFA371A19E7,  0x9ABE14CD44753B53,   -79 },  // 1.0e+041
    { 0x48A6F578C4E0A061,  0xF79687AED3EEC552,   -83 },  // 1.0e+042
    { 0x48DCB2D6F618C879,  0xC612062576589DDB,   -86 },  // 1.0e+043
    { 0x4911EFC659CF7D4C,  0x9E74D1B791E07E49,   -89 },  // 1.0e+044
    { 0x49466BB7F0435C9F,  0xFD87B5F28300CA0E,   -93 },  // 1.0e+045
    { 0x497C06A5EC5433C7,  0xCAD2F7F5359A3B3F,   -96 },  // 1.0e+046
    { 0x49B18427B3B4A05C,  0xA2425FF75E14FC32,   -99 },  // 1.0e+047
    { 0x49E5E531A0A1C873,  0x81CEB32C4B43FCF5,  -102 },  // 1.0e+048
    { 0x4A1B5E7E08CA3A90,  0xCFB11EAD453994BB,  -106 },  // 1.0e+049
    { 0x4A511B0EC57E649A,  0xA6274BBDD0FADD62,  -109 },  // 1.0e+050
    { 0x4A8561D276DDFDC1,  0x84EC3C97DA624AB5,  -112 },  // 1.0e+051
    { 0x4ABABA4714957D31,  0xD4AD2DBFC3D07788,  -116 },  // 1.0e+052
    { 0x4AF0B46C6CDD6E3F,  0xAA242499697392D3,  -119 },  // 1.0e+053
    { 0x4B24E1878814C9CE,  0x881CEA14545C7576,  -122 },  // 1.0e+054
    { 0x4B5A19E96A19FC41,  0xD9C7DCED53C72256,  -126 },  // 1.0e+055
    { 0x4B905031E2503DA9,  0xAE397D8AA96C1B78,  -129 },  // 1.0e+056
    { 0x4BC4643E5AE44D13,  0x8B61313BBABCE2C7,  -132 },  // 1.0e+057
    { 0x4BF97D4DF19D6058,  0xDF01E85F912E37A4,  -136 },  // 1.0e+058
    { 0x4C2FDCA16E04B86E,  0xB267ED1940F1C61D,  -139 },  // 1.0e+059
    { 0x4C63E9E4E4C2F345,  0x8EB98A7A9A5B04E4,  -142 },  // 1.0e+060
    { 0x4C98E45E1DF3B016,  0xE45C10C42A2B3B06,  -146 },  // 1.0e+061
    { 0x4CCF1D75A5709C1B,  0xB6B00D69BB55C8D2,  -149 },  // 1.0e+062
    { 0x4D03726987666191,  0x9226712162AB070E,  -152 },  // 1.0e+063
    { 0x4D384F03E93FF9F5,  0xE9D71B689DDE71B0,  -156 },  // 1.0e+064
    { 0x4D6E62C4E38FF873,  0xBB127C53B17EC15A,  -159 },  // 1.0e+065
    { 0x4DA2FDBB0E39FB48,  0x95A8637627989AAE,  -162 },  // 1.0e+066
    { 0x4DD7BD29D1C87A1A,  0xEF73D256A5C0F77D,  -166 },  // 1.0e+067
    { 0x4E0DAC74463A98A0,  0xBF8FDB78849A5F97,  -169 },  // 1.0e+068
    { 0x4E428BC8ABE49F64,  0x993FE2C6D07B7FAC,  -172 },  // 1.0e+069
    { 0x4E772EBAD6DDC73D,  0xF53304714D9265E0,  -176 },  // 1.0e+070
    { 0x4EACFA698C95390C,  0xC428D05AA4751E4D,  -179 },  // 1.0e+071
    { 0x4EE21C81F7DD43A8,  0x9CED737BB6C4183E,  -182 },  // 1.0e+072
    { 0x4F16A3A275D49492,  0xFB158592BE068D2F,  -186 },  // 1.0e+073
    { 0x4F4C4C8B1349B9B6,  0xC8DE047564D20A8C,  -189 },  // 1.0e+074
    { 0x4F81AFD6EC0E1412,  0xA0B19D2AB70E6ED7,  -192 },  // 1.0e+075
    { 0x4FB61BCCA7119916,  0x808E17555F3EBF12,  -195 },  // 1.0e+076
    { 0x4FEBA2BFD0D5FF5C,  0xCDB02555653131B7,  -199 },  // 1.0e+077
    { 0x502145B7E285BF99,  0xA48CEAAAB75A8E2C,  -202 },  // 1.0e+078
    { 0x50559725DB272F80,  0x83A3EEEEF9153E8A,  -205 },  // 1.0e+079
    { 0x508AFCEF51F0FB5F,  0xD29FE4B18E88640F,  -209 },  // 1.0e+080
    { 0x50C0DE1593369D1C,  0xA87FEA27A539E9A6,  -212 },  // 1.0e+081
    { 0x50F5159AF8044463,  0x86CCBB52EA94BAEB,  -215 },  // 1.0e+082
    { 0x512A5B01B605557B,  0xD7ADF884AA879178,  -219 },  // 1.0e+083
    { 0x516078E111C3556D,  0xAC8B2D36EED2DAC6,  -222 },  // 1.0e+084
    { 0x5194971956342AC8,  0x8A08F0F8BF0F156C,  -225 },  // 1.0e+085
    { 0x51C9BCDFABC1357A,  0xDCDB1B2798182245,  -229 },  // 1.0e+086
    { 0x5200160BCB58C16D,  0xB0AF48EC79ACE838,  -232 },  // 1.0e+087
    { 0x52341B8EBE2EF1C8,  0x8D590723948A5360,  -235 },  // 1.0e+088
    { 0x526922726DBAAE3A,  0xE2280B6C20DD5233,  -239 },  // 1.0e+089
    { 0x529F6B0F092959C8,  0xB4ECD5F01A4AA829,  -242 },  // 1.0e+090
    { 0x52D3A2E965B9D81D,  0x90BD77F3483BB9BA,  -245 },  // 1.0e+091
    { 0x53088BA3BF284E24,  0xE7958CB87392C2C3,  -249 },  // 1.0e+092
    { 0x533EAE8CAEF261AD,  0xB94470938FA89BCF,  -252 },  // 1.0e+093
    { 0x53732D17ED577D0C,  0x9436C0760C86E30C,  -255 },  // 1.0e+094
    { 0x53A7F85DE8AD5C4F,  0xED246723473E3814,  -259 },  // 1.0e+095
    { 0x53DDF67562D8B363,  0xBDB6B8E905CB6010,  -262 },  // 1.0e+096
    { 0x5412BA095DC7701E,  0x97C560BA6B0919A6,  -265 },  // 1.0e+097
    { 0x5447688BB5394C26,  0xF2D56790AB41C2A3,  -269 },  // 1.0e+098
    { 0x547D42AEA2879F2F,  0xC24452DA229B021C,  -272 },  // 1.0e+099
    { 0x54B249AD2594C37D,  0x9B69DBE1B548CE7D,  -275 },  // 1.0e+100
    { 0x54E6DC186EF9F45D,  0xF8A95FCF88747D95,  -279 },  // 1.0e+101
    { 0x551C931E8AB87174,  0xC6EDE63FA05D3144,  -282 },  // 1.0e+102
    { 0x5551DBF316B346E8,  0x9F24B832E6B0F437,  -285 },  // 1.0e+103
    { 0x558652EFDC6018A2,  0xFEA126B7D78186BD,  -289 },  // 1.0e+104
    { 0x55BBE7ABD3781ECB,  0xCBB41EF979346BCB,  -292 },  // 1.0e+105
    { 0x55F170CB642B133F,  0xA2F67F2DFA90563C,  -295 },  // 1.0e+106
    { 0x5625CCFE3D35D80F,  0x825ECC24C8737830,  -298 },  // 1.0e+107
    { 0x565B403DCC834E12,  0xD097AD07A71F26B3,  -302 },  // 1.0e+108
    { 0x569108269FD210CC,  0xA6DFBD9FB8E5B88F,  -305 },  // 1.0e+109
    { 0x56C54A3047C694FE,  0x857FCAE62D8493A6,  -308 },  // 1.0e+110
    { 0x56FA9CBC59B83A3E,  0xD59944A37C0752A3,  -312 },  // 1.0e+111
    { 0x5730A1F5B8132467,  0xAAE103B5FCD2A882,  -315 },  // 1.0e+112
    { 0x5764CA732617ED80,  0x88B402F7FD75539C,  -318 },  // 1.0e+113
    { 0x5799FD0FEF9DE8E0,  0xDAB99E59958885C5,  -322 },  // 1.0e+114
    { 0x57D03E29F5C2B18C,  0xAEFAE51477A06B04,  -325 },  // 1.0e+115
    { 0x58044DB473335DEF,  0x8BFBEA76C619EF37,  -328 },  // 1.0e+116
    { 0x583961219000356B,  0xDFF9772470297EBE,  -332 },  // 1.0e+117
    { 0x586FB969F40042C6,  0xB32DF8E9F3546565,  -335 },  // 1.0e+118
    { 0x58A3D3E2388029BC,  0x8F57FA54C2A9EAB7,  -338 },  // 1.0e+119
    { 0x58D8C8DAC6A0342B,  0xE55990879DDCAABE,  -342 },  // 1.0e+120
    { 0x590EFB1178484135,  0xB77ADA0617E3BBCC,  -345 },  // 1.0e+121
    { 0x59435CEAEB2D28C1,  0x92C8AE6B464FC970,  -348 },  // 1.0e+122
    { 0x59783425A5F872F2,  0xEADAB0ABA3B2DBE6,  -352 },  // 1.0e+123
    { 0x59AE412F0F768FAE,  0xBBE226EFB628AFEB,  -355 },  // 1.0e+124
    { 0x59E2E8BD69AA19CD,  0x964E858C91BA2656,  -358 },  // 1.0e+125
    { 0x5A17A2ECC414A040,  0xF07DA27A82C37089,  -362 },  // 1.0e+126
    { 0x5A4D8BA7F519C850,  0xC06481FB9BCF8D3A,  -365 },  // 1.0e+127
    { 0x5A827748F9301D32,  0x99EA0196163FA42F,  -368 },  // 1.0e+128
    { 0x5AB7151B377C247F,  0xF64335BCF065D37E,  -372 },  // 1.0e+129
    { 0x5AECDA62055B2D9E,  0xC5029163F384A932,  -375 },  // 1.0e+130
    { 0x5B22087D4358FC83,  0x9D9BA7832936EDC1,  -378 },  // 1.0e+131
    { 0x5B568A9C942F3BA4,  0xFC2C3F3841F17C68,  -382 },  // 1.0e+132
    { 0x5B8C2D43B93B0A8C,  0xC9BCFF6034C13053,  -385 },  // 1.0e+133
    { 0x5BC19C4A53C4E698,  0xA163FF802A3426A9,  -388 },  // 1.0e+134
    { 0x5BF6035CE8B6203E,  0x811CCC668829B888,  -391 },  // 1.0e+135
    { 0x5C2B843422E3A84D,  0xCE947A3DA6A9273F,  -395 },  // 1.0e+136
    { 0x5C6132A095CE4930,  0xA54394FE1EEDB8FF,  -398 },  // 1.0e+137
    { 0x5C957F48BB41DB7C,  0x843610CB4BF160CC,  -401 },  // 1.0e+138
    { 0x5CCADF1AEA12525B,  0xD389B4787982347A,  -405 },  // 1.0e+139
    { 0x5D00CB70D24B7379,  0xA93AF6C6C79B5D2E,  -408 },  // 1.0e+140
    { 0x5D34FE4D06DE5057,  0x87625F056C7C4A8C,  -411 },  // 1.0e+141
    { 0x5D6A3DE04895E46D,  0xD89D64D57A607745,  -415 },  // 1.0e+142
    { 0x5DA066AC2D5DAEC4,  0xAD4AB7112EB3929E,  -418 },  // 1.0e+143
    { 0x5DD4805738B51A75,  0x8AA22C0DBEF60EE5,  -421 },  // 1.0e+144
    { 0x5E09A06D06E26113,  0xDDD0467C64BCE4A1,  -425 },  // 1.0e+145
    { 0x5E400444244D7CAC,  0xB1736B96B6FD83B4,  -428 },  // 1.0e+146
    { 0x5E7405552D60DBD7,  0x8DF5EFABC5979C90,  -431 },  // 1.0e+147
    { 0x5EA906AA78B912CC,  0xE3231912D5BF60E7,  -435 },  // 1.0e+148
    { 0x5EDF485516E7577F,  0xB5B5ADA8AAFF80B9,  -438 },  // 1.0e+149
    { 0x5F138D352E5096B0,  0x915E2486EF32CD61,  -441 },  // 1.0e+150
    { 0x5F48708279E4BC5B,  0xE896A0D7E51E1567,  -445 },  // 1.0e+151
    { 0x5F7E8CA3185DEB72,  0xBA121A4650E4DDEC,  -448 },  // 1.0e+152
    { 0x5FB317E5EF3AB328,  0x94DB483840B717F0,  -451 },  // 1.0e+153
    { 0x5FE7DDDF6B095FF1,  0xEE2BA6C0678B5980,  -455 },  // 1.0e+154
    { 0x601DD55745CBB7ED,  0xBE89523386091466,  -458 },  // 1.0e+155
    { 0x6052A5568B9F52F5,  0x986DDB5C6B3A76B8,  -461 },  // 1.0e+156
    { 0x60874EAC2E8727B2,  0xF3E2F893DEC3F127,  -465 },  // 1.0e+157
    { 0x60BD22573A28F19E,  0xC31BFA0FE5698DB9,  -468 },  // 1.0e+158
    { 0x60F2357684599703,  0x9C1661A651213E2E,  -471 },  // 1.0e+159
    { 0x6126C2D4256FFCC3,  0xF9BD690A1B68637C,  -475 },  // 1.0e+160
    { 0x615C73892ECBFBF4,  0xC7CABA6E7C5382C9,  -478 },  // 1.0e+161
    { 0x6191C835BD3F7D79,  0x9FD561F1FD0F9BD4,  -481 },  // 1.0e+162
    { 0x61C63A432C8F5CD7,  0xFFBBCFE994E5C620,  -485 },  // 1.0e+163
    { 0x61FBC8D3F7B3340C,  0xCC963FEE10B7D1B4,  -488 },  // 1.0e+164
    { 0x62315D847AD00088,  0xA3AB66580D5FDAF6,  -491 },  // 1.0e+165
    { 0x6265B4E5998400AA,  0x82EF85133DE648C5,  -494 },  // 1.0e+166
    { 0x629B221EFFE500D4,  0xD17F3B51FCA3A7A1,  -498 },  // 1.0e+167
    { 0x62D0F5535FEF2085,  0xA798FC4196E952E8,  -501 },  // 1.0e+168
    { 0x630532A837EAE8A6,  0x8613FD0145877586,  -504 },  // 1.0e+169
    { 0x633A7F5245E5A2CF,  0xD686619BA27255A3,  -508 },  // 1.0e+170
    { 0x63708F936BAF85C2,  0xAB9EB47C81F51150,  -511 },  // 1.0e+171
    { 0x63A4B378469B6732,  0x894BC396CE5DA773,  -514 },  // 1.0e+172
    { 0x63D9E056584240FE,  0xDBAC6C247D62A584,  -518 },  // 1.0e+173
    { 0x64102C35F729689F,  0xAFBD2350644EEAD0,  -521 },  // 1.0e+174
    { 0x6444374374F3C2C7,  0x8C974F7383725574,  -524 },  // 1.0e+175
    { 0x647945145230B378,  0xE0F218B8D25088B9,  -528 },  // 1.0e+176
    { 0x64AF965966BCE056,  0xB3F4E093DB73A094,  -531 },  // 1.0e+177
    { 0x64E3BDF7E0360C36,  0x8FF71A0FE2C2E6DD,  -534 },  // 1.0e+178
    { 0x6518AD75D8438F44,  0xE65829B3046B0AFB,  -538 },  // 1.0e+179
    { 0x654ED8D34E547314,  0xB84687C269EF3BFC,  -541 },  // 1.0e+180
    { 0x6583478410F4C7ED,  0x936B9FCEBB25C996,  -544 },  // 1.0e+181
    { 0x65B819651531F9E8,  0xEBDF661791D60F57,  -548 },  // 1.0e+182
    { 0x65EE1FBE5A7E7862,  0xBCB2B812DB11A5DF,  -551 },  // 1.0e+183
    { 0x6622D3D6F88F0B3D,  0x96F5600F15A7B7E6,  -554 },  // 1.0e+184
    { 0x665788CCB6B2CE0D,  0xF18899B1BC3F8CA2,  -558 },  // 1.0e+185
    { 0x668D6AFFE45F8190,  0xC13A148E3032D6E8,  -561 },  // 1.0e+186
    { 0x66C262DFEEBBB0FA,  0x9A94DD3E8CF578BA,  -564 },  // 1.0e+187
    { 0x66F6FB97EA6A9D38,  0xF7549530E188C129,  -568 },  // 1.0e+188
    { 0x672CBA7DE5054486,  0xC5DD44271AD3CDBB,  -571 },  // 1.0e+189
    { 0x6761F48EAF234AD4,  0x9E4A9CEC15763E2F,  -574 },  // 1.0e+190
    { 0x679671B25AEC1D89,  0xFD442E4688BD304B,  -578 },  // 1.0e+191
    { 0x67CC0E1EF1A724EB,  0xCA9CF1D206FDC03C,  -581 },  // 1.0e+192
    { 0x680188D357087713,  0xA21727DB38CB0030,  -584 },  // 1.0e+193
    { 0x6835EB082CCA94D8,  0x81AC1FE293D599C0,  -587 },  // 1.0e+194
    { 0x686B65CA37FD3A0E,  0xCF79CC9DB955C2CD,  -591 },  // 1.0e+195
    { 0x68A11F9E62FE4449,  0xA5FB0A17C777CF0A,  -594 },  // 1.0e+196
    { 0x68D56785FBBDD55B,  0x84C8D4DFD2C63F3C,  -597 },  // 1.0e+197
    { 0x690AC1677AAD4AB1,  0xD47487CC8470652C,  -601 },  // 1.0e+198
    { 0x6940B8E0ACAC4EAF,  0xA9F6D30A038D1DBD,  -604 },  // 1.0e+199
    { 0x6974E718D7D7625B,  0x87F8A8D4CFA417CA,  -607 },  // 1.0e+200
    { 0x69AA20DF0DCD3AF1,  0xD98DDAEE19068C77,  -611 },  // 1.0e+201
    { 0x69E0548B68A044D7,  0xAE0B158B4738705F,  -614 },  // 1.0e+202
    { 0x6A1469AE42C8560D,  0x8B3C113C38F9F37F,  -617 },  // 1.0e+203
    { 0x6A498419D37A6B90,  0xDEC681F9F4C31F32,  -621 },  // 1.0e+204
    { 0x6A7FE52048590673,  0xB23867FB2A35B28E,  -624 },  // 1.0e+205
    { 0x6AB3EF342D37A408,  0x8E938662882AF53F,  -627 },  // 1.0e+206
    { 0x6AE8EB0138858D0A,  0xE41F3D6A7377EECB,  -631 },  // 1.0e+207
    { 0x6B1F25C186A6F04D,  0xB67F6455292CBF09,  -634 },  // 1.0e+208
    { 0x6B537798F4285630,  0x91FF83775423CC07,  -637 },  // 1.0e+209
    { 0x6B88557F31326BBC,  0xE998D258869FACD8,  -641 },  // 1.0e+210
    { 0x6BBE6ADEFD7F06AB,  0xBAE0A846D2195713,  -644 },  // 1.0e+211
    { 0x6BF302CB5E6F642B,  0x9580869F0E7AAC0F,  -647 },  // 1.0e+212
    { 0x6C27C37E360B3D36,  0xEF340A98172AACE5,  -651 },  // 1.0e+213
    { 0x6C5DB45DC38E0C83,  0xBF5CD54678EEF0B7,  -654 },  // 1.0e+214
    { 0x6C9290BA9A38C7D2,  0x991711052D8BF3C6,  -657 },  // 1.0e+215
    { 0x6CC734E940C6F9C6,  0xF4F1B4D515ACB93C,  -661 },  // 1.0e+216
    { 0x6CFD022390F8B838,  0xC3F490AA77BD60FD,  -664 },  // 1.0e+217
    { 0x6D3221563A9B7323,  0x9CC3A6EEC6311A64,  -667 },  // 1.0e+218
    { 0x6D66A9ABC9424FEC,  0xFAD2A4B13D1B5D6D,  -671 },  // 1.0e+219
    { 0x6D9C5416BB92E3E7,  0xC8A883C0FDAF7DF1,  -674 },  // 1.0e+220
    { 0x6DD1B48E353BCE70,  0xA086CFCD97BF97F4,  -677 },  // 1.0e+221
    { 0x6E0621B1C28AC20C,  0x806BD9714632DFF7,  -680 },  // 1.0e+222
    { 0x6E3BAA1E332D728F,  0xCD795BE870516657,  -684 },  // 1.0e+223
    { 0x6E714A52DFFC679A,  0xA46116538D0DEB79,  -687 },  // 1.0e+224
    { 0x6EA59CE797FB8180,  0x8380DEA93DA4BC61,  -690 },  // 1.0e+225
    { 0x6EDB04217DFA61E0,  0xD267CAA862A12D67,  -694 },  // 1.0e+226
    { 0x6F10E294EEBC7D2C,  0xA8530886B54DBDEC,  -697 },  // 1.0e+227
    { 0x6F451B3A2A6B9C77,  0x86A8D39EF77164BD,  -700 },  // 1.0e+228
    { 0x6F7A6208B5068395,  0xD77485CB25823AC8,  -704 },  // 1.0e+229
    { 0x6FB07D457124123D,  0xAC5D37D5B79B623A,  -707 },  // 1.0e+230
    { 0x6FE49C96CD6D16CC,  0x89E42CAAF9491B61,  -710 },  // 1.0e+231
    { 0x7019C3BC80C85C7F,  0xDCA04777F541C568,  -714 },  // 1.0e+232
    { 0x70501A55D07D39D0,  0xB080392CC4349DED,  -717 },  // 1.0e+233
    { 0x708420EB449C8843,  0x8D3360F09CF6E4BE,  -720 },  // 1.0e+234
    { 0x70B9292615C3AA54,  0xE1EBCE4DC7F16DFC,  -724 },  // 1.0e+235
    { 0x70EF736F9B3494E9,  0xB4BCA50B065ABE64,  -727 },  // 1.0e+236
    { 0x7123A825C100DD12,  0x9096EA6F38489850,  -730 },  // 1.0e+237
    { 0x7158922F31411456,  0xE757DD7EC07426E6,  -734 },  // 1.0e+238
    { 0x718EB6BAFD91596C,  0xB913179899F68585,  -737 },  // 1.0e+239
    { 0x71C33234DE7AD7E3,  0x940F4613AE5ED137,  -740 },  // 1.0e+240
    { 0x71F7FEC216198DDC,  0xECE53CEC4A314EBE,  -744 },  // 1.0e+241
    { 0x722DFE729B9FF153,  0xBD8430BD08277232,  -747 },  // 1.0e+242
    { 0x7262BF07A143F6D4,  0x979CF3CA6CEC5B5B,  -750 },  // 1.0e+243
    { 0x72976EC98994F489,  0xF294B943E17A2BC5,  -754 },  // 1.0e+244
    { 0x72CD4A7BEBFA31AB,  0xC21094364DFB5637,  -757 },  // 1.0e+245
    { 0x73024E8D737C5F0B,  0x9B407691D7FC44F9,  -760 },  // 1.0e+246
    { 0x7336E230D05B76CE,  0xF867241C8CC6D4C1,  -764 },  // 1.0e+247
    { 0x736C9ABD04725481,  0xC6B8E9B0709F109B,  -767 },  // 1.0e+248
    { 0x73A1E0B622C774D1,  0x9EFA548D26E5A6E2,  -770 },  // 1.0e+249
    { 0x73D658E3AB795205,  0xFE5D54150B090B03,  -774 },  // 1.0e+250
    { 0x740BEF1C9657A686,  0xCB7DDCDDA26DA269,  -777 },  // 1.0e+251
    { 0x74417571DDF6C814,  0xA2CB1717B52481EE,  -780 },  // 1.0e+252
    { 0x7475D2CE55747A19,  0x823C12795DB6CE58,  -783 },  // 1.0e+253
    { 0x74AB4781EAD1989F,  0xD0601D8EFC57B08C,  -787 },  // 1.0e+254
    { 0x74E10CB132C2FF64,  0xA6B34AD8C9DFC070,  -790 },  // 1.0e+255
    { 0x75154FDD7F73BF3C,  0x855C3BE0A17FCD27,  -793 },  // 1.0e+256
    { 0x754AA3D4DF50AF0B,  0xD5605FCDCF32E1D7,  -797 },  // 1.0e+257
    { 0x7580A6650B926D67,  0xAAB37FD7D8F58179,  -800 },  // 1.0e+258
    { 0x75B4CFFE4E7708C1,  0x888F99797A5E012E,  -803 },  // 1.0e+259
    { 0x75EA03FDE214CAF1,  0xDA7F5BF590966849,  -807 },  // 1.0e+260
    { 0x7620427EAD4CFED7,  0xAECC49914078536E,  -810 },  // 1.0e+261
    { 0x7654531E58A03E8C,  0x8BD6A141006042BE,  -813 },  // 1.0e+262
    { 0x768967E5EEC84E2F,  0xDFBDCECE67006ACA,  -817 },  // 1.0e+263
    { 0x76BFC1DF6A7A61BB,  0xB2FE3F0B8599EF08,  -820 },  // 1.0e+264
    { 0x76F3D92BA28C7D15,  0x8F31CC0937AE58D3,  -823 },  // 1.0e+265
    { 0x7728CF768B2F9C5A,  0xE51C79A85916F485,  -827 },  // 1.0e+266
    { 0x775F03542DFB8371,  0xB749FAED14125D37,  -830 },  // 1.0e+267
    { 0x779362149CBD3227,  0x92A1958A76751760,  -833 },  // 1.0e+268
    { 0x77C83A99C3EC7EB0,  0xEA9C227723EE8BCC,  -837 },  // 1.0e+269
    { 0x77FE494034E79E5C,  0xBBB01B9283253CA3,  -840 },  // 1.0e+270
    { 0x7832EDC82110C2FA,  0x96267C7535B763B6,  -843 },  // 1.0e+271
    { 0x7867A93A2954F3B8,  0xF03D93EEBC589F89,  -847 },  // 1.0e+272
    { 0x789D9388B3AA30A6,  0xC0314325637A193A,  -850 },  // 1.0e+273
    { 0x78D27C35704A5E68,  0x99C102844F94E0FC,  -853 },  // 1.0e+274
    { 0x79071B42CC5CF602,  0xF6019DA07F549B2C,  -857 },  // 1.0e+275
    { 0x793CE2137F743382,  0xC4CE17B399107C23,  -860 },  // 1.0e+276
    { 0x79720D4C2FA8A031,  0x9D71AC8FADA6C9B6,  -863 },  // 1.0e+277
    { 0x79A6909F3B92C83E,  0xFBE9141915D7A923,  -867 },  // 1.0e+278
    { 0x79DC34C70A777A4D,  0xC987434744AC874F,  -870 },  // 1.0e+279
    { 0x7A11A0FC668AAC70,  0xA139029F6A239F73,  -873 },  // 1.0e+280
    { 0x7A46093B802D578C,  0x80FA687F881C7F8F,  -876 },  // 1.0e+281
    { 0x7A7B8B8A6038AD6F,  0xCE5D73FF402D98E4,  -880 },  // 1.0e+282
    { 0x7AB137367C236C66,  0xA5178FFF668AE0B7,  -883 },  // 1.0e+283
    { 0x7AE585041B2C477F,  0x8412D9991ED58092,  -886 },  // 1.0e+284
    { 0x7B1AE64521F7595F,  0xD3515C2831559A84,  -890 },  // 1.0e+285
    { 0x7B50CFEB353A97DB,  0xA90DE3535AAAE203,  -893 },  // 1.0e+286
    { 0x7B8503E602893DD2,  0x873E4F75E2224E69,  -896 },  // 1.0e+287
    { 0x7BBA44DF832B8D46,  0xD863B256369D4A41,  -900 },  // 1.0e+288
    { 0x7BF06B0BB1FB384C,  0xAD1C8EAB5EE43B67,  -903 },  // 1.0e+289
    { 0x7C2485CE9E7A065F,  0x8A7D3EEF7F1CFC53,  -906 },  // 1.0e+290
    { 0x7C59A742461887F7,  0xDD95317F31C7FA1E,  -910 },  // 1.0e+291
    { 0x7C9008896BCF54FA,  0xB1442798F49FFB4B,  -913 },  // 1.0e+292
    { 0x7CC40AABC6C32A39,  0x8DD01FAD907FFC3C,  -916 },  // 1.0e+293
    { 0x7CF90D56B873F4C7,  0xE2E69915B3FFF9FA,  -920 },  // 1.0e+294
    { 0x7D2F50AC6690F1F9,  0xB58547448FFFFB2E,  -923 },  // 1.0e+295
    { 0x7D63926BC01A973C,  0x91376C36D99995BF,  -926 },  // 1.0e+296
    { 0x7D987706B0213D0A,  0xE858AD248F5C22CA,  -930 },  // 1.0e+297
    { 0x7DCE94C85C298C4D,  0xB9E08A83A5E34F08,  -933 },  // 1.0e+298
    { 0x7E031CFD3999F7B0,  0x94B3A202EB1C3F3A,  -936 },  // 1.0e+299
    { 0x7E37E43C8800759C,  0xEDEC366B11C6CB90,  -940 },  // 1.0e+300
    { 0x7E6DDD4BAA009303,  0xBE5691EF416BD60D,  -943 },  // 1.0e+301
    { 0x7EA2AA4F4A405BE2,  0x9845418C345644D7,  -946 },  // 1.0e+302
    { 0x7ED754E31CD072DA,  0xF3A20279ED56D48B,  -950 },  // 1.0e+303
    { 0x7F0D2A1BE4048F91,  0xC2E801FB244576D6,  -953 },  // 1.0e+304
    { 0x7F423A516E82D9BB,  0x9BECCE62836AC578,  -956 },  // 1.0e+305
    { 0x7F76C8E5CA239029,  0xF97AE3D0D2446F26,  -960 },  // 1.0e+306
    { 0x7FAC7B1F3CAC7434,  0xC795830D75038C1E,  -963 },  // 1.0e+307
    { 0x7FE1CCF385EBC8A0,  0x9FAACF3DF73609B2,  -966 },  // 1.0e+308
  };

// `exp10 = ROUND((exp2 - 57) * LOG2)` where `LOG2 = 0.30103`
constexpr int s_decimal_exp_min = ((s_decimal_multipliers[0].exp2 - 57) * 30103LL + 50000LL) / 100000LL;

enum floating_point_class : uint8_t
  {
    floating_point_class_zero       = 0,
    floating_point_class_subnormal  = 1,
    floating_point_class_infinity   = 2,
    floating_point_class_nan        = 3,
    floating_point_class_normal     = 4,
  };

struct frexp
  {
    floating_point_class cls;
    bool sign;
    int exp;
    uint64_t mant;
  };

inline
frexp
do_frexp2_23(float value)
  {
    // Extract the biased exponent and mantissa without the hidden bit.
    uint32_t bits;
    static_assert(sizeof(bits) == sizeof(value));
    ::memcpy(&bits, &value, sizeof(bits));

    frexp frx;
    frx.cls = floating_point_class_normal;
    frx.sign = (int32_t) bits < 0;
    frx.exp = (int) (bits >> 23) & 0xFF;
    frx.mant = bits & 0x7FFFFFULL;

    if(((frx.exp + 1) & 0xFF) <= 1) {
      // The biased exponent is 00 or FF, so this value is not normal.
      frx.cls = (floating_point_class) ((frx.exp & 2) | (int) ((frx.mant + INT64_MAX) >> 63));
      if(frx.cls != floating_point_class_subnormal)
        return frx;

      // Normalize the subnormal value.
      int sh = ROCKET_LZCNT64(frx.mant) - 40;
      frx.exp -= sh - 1;
      frx.mant <<= sh;
    }

    // Convert the exponent and mantissa back. The number will be
    // interpreted as `sign 0x mant P exp` in C99 hexadecimal
    // floating-point notation.
    frx.exp -= 150;
    frx.mant |= 0x800000ULL;
    return frx;
  }

inline
frexp
do_frexp2_52(double value)
  {
    // Extract the biased exponent and mantissa without the hidden bit.
    uint64_t bits;
    static_assert(sizeof(bits) == sizeof(value));
    ::memcpy(&bits, &value, sizeof(bits));

    frexp frx;
    frx.cls = floating_point_class_normal;
    frx.sign = (int64_t) bits < 0;
    frx.exp = (int) (bits >> 52) & 0x7FF;
    frx.mant = bits & 0xFFFFFFFFFFFFFULL;

    if(((frx.exp + 1) & 0x7FF) <= 1) {
      // The biased exponent is 000 or 7FF, so this value is not normal.
      frx.cls = (floating_point_class) ((frx.exp & 2) | (int) ((frx.mant + INT64_MAX) >> 63));
      if(frx.cls != floating_point_class_subnormal)
        return frx;

      // Normalize the subnormal value.
      int sh = ROCKET_LZCNT64(frx.mant) - 11;
      frx.exp -= sh - 1;
      frx.mant <<= sh;
    }

    // Convert the exponent and mantissa back. The number will be
    // interpreted as `sign 0x mant P exp` in C99 hexadecimal
    // floating-point notation.
    frx.exp -= 1075;
    frx.mant |= 0x10000000000000ULL;
    return frx;
  }

inline
frexp
do_frexp10_8(float value)
  {
    // Extract the biased exponent and mantissa without the hidden bit.
    uint32_t bits;
    static_assert(sizeof(bits) == sizeof(value));
    ::memcpy(&bits, &value, sizeof(bits));

    frexp frx;
    frx.cls = floating_point_class_normal;
    frx.sign = (int32_t) bits < 0;
    frx.exp = (int) (bits >> 23) & 0xFF;
    frx.mant = bits & 0x7FFFFFULL;

    if(((frx.exp + 1) & 0xFF) <= 1) {
      // The biased exponent is 00 or FF, so this value is not normal.
      frx.cls = (floating_point_class) ((frx.exp & 2) | (int) ((frx.mant + INT64_MAX) >> 63));
      if(frx.cls != floating_point_class_subnormal)
        return frx;

      // Normalize the subnormal value and remove the hidden bit.
      int sh = ROCKET_LZCNT64(frx.mant) - 40;
      frx.exp -= sh - 1;
      frx.mant <<= sh;
      frx.mant &= 0x7FFFFFULL;
    }

    // Get the multiplier for this value, using binary search. This
    // will not become a subnormal double; no need to check that.
    uint64_t xbits = (uint64_t) ((uint32_t) frx.exp + 896) << 52 | frx.mant << 29;
    uint32_t mlo = 1;
    uint32_t mhi = ::std::size(s_decimal_multipliers);

    while(mlo != mhi) {
      // book moves...
      uint32_t mid = (mlo + mhi) / 2;
      if(xbits < s_decimal_multipliers[mid].bound)
        mhi = mid;
      else
        mlo = mid + 1;
    }

    mlo --;
    const auto& mult = s_decimal_multipliers[mlo];

    // Raise the value to (0,0x1p24) and convert it to an integer. This
    // produces 9 significant digits.
    xbits = (0x800000ULL | frx.mant) << (frx.exp + mult.exp2 - 182);
    uint64_t half_ulp = 1ULL << (frx.exp + mult.exp2 - 183);
    uint64_t ceiled_mult_mant = (mult.mant + UINT32_MAX) >> 32;
    uint32_t mant_min = (uint32_t) ((xbits - half_ulp) *  ceiled_mult_mant  / 1000000000ULL + 1ULL);
    uint32_t mant_max = (uint32_t) ((xbits + half_ulp) * (ceiled_mult_mant - 1ULL) / 1000000000ULL);

    // Round the mantissa to shortest. This is done by removing trailing
    // digits one by one, until the result would be out of range.
    bits = mant_min + (mant_max - mant_min) / 2;
    uint32_t mant_next = bits;
    uint32_t next_digits = bits;
    uint32_t next_mult = 1U;

    while((mant_next >= mant_min) && (mant_next <= mant_max)) {
      // Shift one digit from `next_digits` to `next_mult`.
      bits = mant_next;
      uint32_t carry = (4U - next_digits % 10U) >> 31;
      next_digits /= 10U;
      next_digits += carry;
      next_mult *= 10U;
      mant_next = next_digits * next_mult;
    }

    if(bits >= 1000000000U) {
      // Rounding has effected a carry, so revert it.
      bits /= 10U;
      mlo ++;
    }

    // Convert the exponent and mantissa back. The number will be
    // interpreted as `sign mant E exp` in scientific floating-point
    // notation.
    frx.exp = (int) mlo - s_decimal_exp_min - 8;
    frx.mant = bits;
    return frx;
  }

inline
frexp
do_frexp10_17(double value)
  {
    // Extract the biased exponent and mantissa without the hidden bit.
    uint64_t bits;
    static_assert(sizeof(bits) == sizeof(value));
    ::memcpy(&bits, &value, sizeof(bits));

    frexp frx;
    frx.cls = floating_point_class_normal;
    frx.sign = (int64_t) bits < 0;
    frx.exp = (int) (bits >> 52) & 0x7FF;
    frx.mant = bits & 0xFFFFFFFFFFFFFULL;

    if(((frx.exp + 1) & 0x7FF) <= 1) {
      // The biased exponent is 000 or 7FF, so this value is not normal.
      frx.cls = (floating_point_class) ((frx.exp & 2) | (int) ((frx.mant + INT64_MAX) >> 63));
      if(frx.cls != floating_point_class_subnormal)
        return frx;

      // Normalize the subnormal value and remove the hidden bit.
      int sh = ROCKET_LZCNT64(frx.mant) - 11;
      frx.exp -= sh - 1;
      frx.mant <<= sh;
      frx.mant &= 0xFFFFFFFFFFFFFULL;
    }

    // Get the multiplier for this value, using binary search.
    bits &= 0x7FFFFFFFFFFFFFFFULL;
    uint32_t mlo = 1;
    uint32_t mhi = ::std::size(s_decimal_multipliers);

    while(mlo != mhi) {
      // book moves...
      uint32_t mid = (mlo + mhi) / 2;
      if(bits < s_decimal_multipliers[mid].bound)
        mhi = mid;
      else
        mlo = mid + 1;
    }

    mlo --;
    const auto& mult = s_decimal_multipliers[mlo];

    // Raise the value to (0,0x1p53) and convert it to an integer. This
    // produces 18 significant digits.
    bits = (0x10000000000000ULL | frx.mant) << (frx.exp + mult.exp2 - 1075);
    uint64_t half_ulp = 1ULL << (frx.exp + mult.exp2 - 1076);
    uint64_t mant_min = mulh128(bits - half_ulp, mult.mant) + 1ULL;
    uint64_t mant_max = mulh128(bits + half_ulp, mult.mant - 1ULL);

    // Round the mantissa to shortest. This is done by removing trailing
    // digits one by one, until the result would be out of range.
    bits = mant_min + (mant_max - mant_min) / 2;
    uint64_t mant_next = bits;
    uint64_t next_digits = bits;
    uint64_t next_mult = 1U;

    while((mant_next >= mant_min) && (mant_next <= mant_max)) {
      // Shift one digit from `next_digits` to `next_mult`.
      bits = mant_next;
      uint64_t carry = (4ULL - next_digits % 10U) >> 63;
      next_digits /= 10U;
      next_digits += carry;
      next_mult *= 10U;
      mant_next = next_digits * next_mult;
    }

    if(bits >= 1000000000000000000ULL) {
      // Rounding has effected a carry, so revert it.
      bits /= 10U;
      mlo ++;
    }

    // Convert the exponent and mantissa back. The number will be
    // interpreted as `sign mant E exp` in scientific floating-point
    // notation.
    frx.exp = (int) mlo - s_decimal_exp_min - 17;
    frx.mant = bits;
    return frx;
  }

inline
bool
do_is_special_class(const char*& str_out, uint32_t& len_out, const frexp& frx)
  {
    switch(static_cast<uint32_t>(frx.cls)) {
      case floating_point_class_infinity:
        str_out = "-infinity" + (1U - frx.sign);
        len_out = 8U + frx.sign;
        return true;

      case floating_point_class_nan:
        str_out = "-nan" + (1U - frx.sign);
        len_out = 3U + frx.sign;
        return true;

      case floating_point_class_zero:
        str_out = s_small_decimals[0] + (1U - frx.sign);
        len_out = 1U + frx.sign;
        return true;

      default:
        return false;
    }
  }

inline
void
do_write_zeroes(char*& wptr, uint32_t len)
  {
    for(uint32_t k = len;  k != 0;  --k) {
      // Prevent optimization...
      (volatile char&) *wptr = '0';
      wptr ++;
    }
  }

inline
void
do_write_mantissa(char*& wptr, uint64_t mant, uint64_t divisor, uint32_t base, const char* rdxpp_opt)
  {
    uint64_t reg = mant;
    while(reg != 0) {
      // Pop a digit from `reg` and write it.
      uint64_t digit = reg / divisor;
      reg %= divisor;
      reg *= base;

      if(wptr == rdxpp_opt) {
        // Skip the radix point which is set by the caller.
        wptr ++;
      }

      *wptr = (char) ('0' + digit + ((9U - digit) >> 61));
      wptr ++;
    }

    while(rdxpp_opt && (wptr < rdxpp_opt)) {
      // Append zeroes up to `rdxp_opt`. The string will end there so
      // don't write a radix point.
      *wptr = '0';
      wptr ++;
    }
  }

inline
void
do_write_exp(char*& wptr, int exp)
  {
    uint32_t abs_exp = (uint32_t) ::std::abs(exp);
    const char* digits;
    uint32_t ndigits;

    // The exponent always has a sign symbol.
    *wptr = (exp == (int) abs_exp) ? '+' : '-';
    wptr ++;

    // Get the static string.
    if(abs_exp < 100U) {
      // Ensure at least two significant digits, like POSIX.
      do_get_small_decimal(digits, ndigits, 100U + abs_exp);
      digits ++;
      ndigits --;
    }
    else
      do_get_small_decimal(digits, ndigits, abs_exp);

    while(ndigits != 0) {
      // Copy a significant digit, in normal order.
      *wptr = *digits;
      digits ++;
      ndigits --;
      wptr ++;
    }
  }

}  // namespace

void
ascii_numput::
put_TB(bool value)
  noexcept
  {
    this->m_data = "false\0true" + 6U * value;
    this->m_size = 5U - value;
  }

void
ascii_numput::
put_XP(const volatile void* value)
  noexcept
  {
    char* wptr = ::std::end(this->m_stor);
    *--wptr = 0;

    uint32_t ntotal = do_write_digits_backwards(wptr, (uintptr_t) value, 16, 1);
    wptr -= 2;
    ::memcpy(wptr, "0x", 2);
    ntotal += 2;

    this->m_data = wptr;
    this->m_size = ntotal;
  }

void
ascii_numput::
put_BU(uint64_t value, uint32_t precision)
  noexcept
  {
    char* wptr = ::std::end(this->m_stor);
    *--wptr = 0;

    uint32_t ntotal = do_write_digits_backwards(wptr, value, 2, precision);
    wptr -= 2;
    ::memcpy(wptr, "0b", 2);
    ntotal += 2;

    this->m_data = wptr;
    this->m_size = ntotal;
  }

void
ascii_numput::
put_XU(uint64_t value, uint32_t precision)
  noexcept
  {
    char* wptr = ::std::end(this->m_stor);
    *--wptr = 0;

    uint32_t ntotal = do_write_digits_backwards(wptr, value, 16, precision);
    wptr -= 2;
    ::memcpy(wptr, "0x", 2);
    ntotal += 2;

    this->m_data = wptr;
    this->m_size = ntotal;
  }

void
ascii_numput::
put_DU(uint64_t value, uint32_t precision)
  noexcept
  {
    if((precision == 1) && (value < ::std::size(s_small_decimals))) {
      // Get the static string.
      do_get_small_decimal(this->m_data, this->m_size, (uint32_t) value);
      return;
    }

    char* wptr = ::std::end(this->m_stor);
    *--wptr = 0;

    uint32_t ntotal = do_write_digits_backwards(wptr, value, 10, precision);

    this->m_data = wptr;
    this->m_size = ntotal;
  }

void
ascii_numput::
put_BI(int64_t value, uint32_t precision)
  noexcept
  {
    if(value >= 0)
      return this->put_BU((uint64_t) value, precision);

    char* wptr = ::std::end(this->m_stor);
    *--wptr = 0;

    uint32_t ntotal = do_write_digits_backwards(wptr, -(uint64_t) value, 2, precision);
    wptr -= 3;
    ::memcpy(wptr, "-0b", 3);
    ntotal += 3;

    this->m_data = wptr;
    this->m_size = ntotal;
  }

void
ascii_numput::
put_XI(int64_t value, uint32_t precision)
  noexcept
  {
    if(value >= 0)
      return this->put_XU((uint64_t) value, precision);

    char* wptr = ::std::end(this->m_stor);
    *--wptr = 0;

    uint32_t ntotal = do_write_digits_backwards(wptr, -(uint64_t) value, 16, precision);
    wptr -= 3;
    ::memcpy(wptr, "-0x", 3);
    ntotal += 3;

    this->m_data = wptr;
    this->m_size = ntotal;
  }

void
ascii_numput::
put_DI(int64_t value, uint32_t precision)
  noexcept
  {
    if(value >= 0)
      return this->put_DU((uint64_t) value, precision);

    if((precision == 1) && (-(uint64_t) value < ::std::size(s_small_decimals))) {
      // Get the static string.
      do_get_small_decimal(this->m_data, this->m_size, -(uint32_t) value);
      this->m_data -= 1;
      this->m_size += 1;
      return;
    }

    char* wptr = ::std::end(this->m_stor);
    *--wptr = 0;

    uint32_t ntotal = do_write_digits_backwards(wptr, -(uint64_t) value, 10, precision);
    wptr -= 1;
    wptr[0] = '-';
    ntotal += 1;

    this->m_data = wptr;
    this->m_size = ntotal;
  }

void
ascii_numput::
put_BF(float value)
  noexcept
  {
    frexp frx = do_frexp2_23(value);
    if(do_is_special_class(this->m_data, this->m_size, frx))
      return;

    frx.exp += 23;

    ::memcpy(this->m_stor, "-0b0.**", 8);
    char* wptr = ::std::begin(this->m_stor) + 3;

    if((frx.exp >= 0) && (frx.exp < 24)) {
      // Write the number in plain format. A decimal point will be
      // inserted in the middle.
      char* rdxpp = wptr + (uint32_t) (frx.exp + 1);
      *rdxpp = this->m_rdxp;
      do_write_mantissa(wptr, frx.mant, 0x1p23, 2, rdxpp);
    }
    else if((frx.exp >= -4) && (frx.exp < 0)) {
      // Write the number in plain format. The number starts with
      // `0.` and zeroes are filled as necessary.
      wptr += 2;
      do_write_zeroes(wptr, -(uint32_t) (frx.exp + 1));
      do_write_mantissa(wptr, frx.mant, 0x1p23, 2, nullptr);
    }
    else {
      // Write the number in scientific notation.
      char* rdxpp = wptr + 1;
      *rdxpp = this->m_rdxp;
      do_write_mantissa(wptr, frx.mant, 0x1p23, 2, rdxpp);
      *wptr = 'p';
      wptr += 1;
      do_write_exp(wptr, frx.exp);
    }

    ROCKET_ASSERT(wptr < ::std::end(this->m_stor));
    *wptr = 0;

    this->m_data = this->m_stor + (1U - frx.sign);
    this->m_size = (uint32_t) (wptr - this->m_data);
  }

void
ascii_numput::
put_BEF(float value)
  noexcept
  {
    frexp frx = do_frexp2_23(value);
    if(do_is_special_class(this->m_data, this->m_size, frx))
      return;

    frx.exp += 23;

    ::memcpy(this->m_stor, "-0b0.**", 8);
    char* wptr = ::std::begin(this->m_stor) + 3;

    // Write the number in scientific notation.
    char* rdxpp = wptr + 1;
    *rdxpp = this->m_rdxp;
    do_write_mantissa(wptr, frx.mant, 0x1p23, 2, rdxpp);
    *wptr = 'p';
    wptr += 1;
    do_write_exp(wptr, frx.exp);

    ROCKET_ASSERT(wptr < ::std::end(this->m_stor));
    *wptr = 0;

    this->m_data = this->m_stor + (1U - frx.sign);
    this->m_size = (uint32_t) (wptr - this->m_data);
  }

void
ascii_numput::
put_XF(float value)
  noexcept
  {
    frexp frx = do_frexp2_23(value);
    if(do_is_special_class(this->m_data, this->m_size, frx))
      return;

    frx.exp += 23;
    frx.mant <<= frx.exp & 3;
    frx.exp >>= 2;

    ::memcpy(this->m_stor, "-0x0.**", 8);
    char* wptr = ::std::begin(this->m_stor) + 3;

    if((frx.exp >= 0) && (frx.exp < 6)) {
      // Write the number in plain format. A decimal point will be
      // inserted in the middle.
      char* rdxpp = wptr + (uint32_t) (frx.exp + 1);
      *rdxpp = this->m_rdxp;
      do_write_mantissa(wptr, frx.mant, 0x1p23, 16, rdxpp);
    }
    else if((frx.exp >= -4) && (frx.exp < 0)) {
      // Write the number in plain format. The number starts with
      // `0.` and zeroes are filled as necessary.
      wptr += 2;
      do_write_zeroes(wptr, -(uint32_t) (frx.exp + 1));
      do_write_mantissa(wptr, frx.mant, 0x1p23, 16, nullptr);
    }
    else {
      // Write the number in scientific notation.
      char* rdxpp = wptr + 1;
      *rdxpp = this->m_rdxp;
      do_write_mantissa(wptr, frx.mant, 0x1p23, 16, rdxpp);
      *wptr = 'p';
      wptr += 1;
      do_write_exp(wptr, frx.exp * 4);
    }

    ROCKET_ASSERT(wptr < ::std::end(this->m_stor));
    *wptr = 0;

    this->m_data = this->m_stor + (1U - frx.sign);
    this->m_size = (uint32_t) (wptr - this->m_data);
  }

void
ascii_numput::
put_XEF(float value)
  noexcept
  {
    frexp frx = do_frexp2_23(value);
    if(do_is_special_class(this->m_data, this->m_size, frx))
      return;

    frx.exp += 23;
    frx.mant <<= frx.exp & 3;
    frx.exp >>= 2;

    ::memcpy(this->m_stor, "-0x0.**", 8);
    char* wptr = ::std::begin(this->m_stor) + 3;

    // Write the number in scientific notation.
    char* rdxpp = wptr + 1;
    *rdxpp = this->m_rdxp;
    do_write_mantissa(wptr, frx.mant, 0x1p23, 16, rdxpp);
    *wptr = 'p';
    wptr += 1;
    do_write_exp(wptr, frx.exp * 4);

    ROCKET_ASSERT(wptr < ::std::end(this->m_stor));
    *wptr = 0;

    this->m_data = this->m_stor + (1U - frx.sign);
    this->m_size = (uint32_t) (wptr - this->m_data);
  }

void
ascii_numput::
put_DF(float value)
  noexcept
  {
    frexp frx = do_frexp10_8(value);
    if(do_is_special_class(this->m_data, this->m_size, frx))
      return;

    frx.exp += 8;

    ::memcpy(this->m_stor, "-0.", 4);
    char* wptr = ::std::begin(this->m_stor) + 1;

    if((frx.exp >= 0) && (frx.exp < 6)) {
      // Write the number in plain format. A decimal point will be
      // inserted in the middle.
      char* rdxpp = wptr + (uint32_t) (frx.exp + 1);
      *rdxpp = this->m_rdxp;
      do_write_mantissa(wptr, frx.mant, 1e8, 10, rdxpp);
    }
    else if((frx.exp >= -4) && (frx.exp < 0)) {
      // Write the number in plain format. The number starts with
      // `0.` and zeroes are filled as necessary.
      wptr += 2;
      do_write_zeroes(wptr, -(uint32_t) (frx.exp + 1));
      do_write_mantissa(wptr, frx.mant, 1e8, 10, nullptr);
    }
    else {
      // Write the number in scientific notation.
      char* rdxpp = wptr + 1;
      *rdxpp = this->m_rdxp;
      do_write_mantissa(wptr, frx.mant, 1e8, 10, rdxpp);
      *wptr = 'e';
      wptr += 1;
      do_write_exp(wptr, frx.exp);
    }

    ROCKET_ASSERT(wptr < ::std::end(this->m_stor));
    *wptr = 0;

    this->m_data = this->m_stor + (1U - frx.sign);
    this->m_size = (uint32_t) (wptr - this->m_data);
  }

void
ascii_numput::
put_DEF(float value)
  noexcept
  {
    frexp frx = do_frexp10_8(value);
    if(do_is_special_class(this->m_data, this->m_size, frx))
      return;

    frx.exp += 8;

    ::memcpy(this->m_stor, "-0.", 4);
    char* wptr = ::std::begin(this->m_stor) + 1;

    // Write the number in scientific notation.
    char* rdxpp = wptr + 1;
    *rdxpp = this->m_rdxp;
    do_write_mantissa(wptr, frx.mant, 1e8, 10, rdxpp);
    *wptr = 'e';
    wptr += 1;
    do_write_exp(wptr, frx.exp);

    ROCKET_ASSERT(wptr < ::std::end(this->m_stor));
    *wptr = 0;

    this->m_data = this->m_stor + (1U - frx.sign);
    this->m_size = (uint32_t) (wptr - this->m_data);
  }

void
ascii_numput::
put_BD(double value)
  noexcept
  {
    frexp frx = do_frexp2_52(value);
    if(do_is_special_class(this->m_data, this->m_size, frx))
      return;

    frx.exp += 52;

    ::memcpy(this->m_stor, "-0b0.**", 8);
    char* wptr = ::std::begin(this->m_stor) + 3;

    if((frx.exp >= 0) && (frx.exp < 53)) {
      // Write the number in plain format. A decimal point will be
      // inserted in the middle.
      char* rdxpp = wptr + (uint32_t) (frx.exp + 1);
      *rdxpp = this->m_rdxp;
      do_write_mantissa(wptr, frx.mant, 0x1p52, 2, rdxpp);
    }
    else if((frx.exp >= -4) && (frx.exp < 0)) {
      // Write the number in plain format. The number starts with
      // `0.` and zeroes are filled as necessary.
      wptr += 2;
      do_write_zeroes(wptr, -(uint32_t) (frx.exp + 1));
      do_write_mantissa(wptr, frx.mant, 0x1p52, 2, nullptr);
    }
    else {
      // Write the number in scientific notation.
      char* rdxpp = wptr + 1;
      *rdxpp = this->m_rdxp;
      do_write_mantissa(wptr, frx.mant, 0x1p52, 2, rdxpp);
      *wptr = 'p';
      wptr += 1;
      do_write_exp(wptr, frx.exp);
    }

    ROCKET_ASSERT(wptr < ::std::end(this->m_stor));
    *wptr = 0;

    this->m_data = this->m_stor + (1U - frx.sign);
    this->m_size = (uint32_t) (wptr - this->m_data);
  }

void
ascii_numput::
put_BED(double value)
  noexcept
  {
    frexp frx = do_frexp2_52(value);
    if(do_is_special_class(this->m_data, this->m_size, frx))
      return;

    frx.exp += 52;

    ::memcpy(this->m_stor, "-0b0.**", 8);
    char* wptr = ::std::begin(this->m_stor) + 3;

    // Write the number in scientific notation.
    char* rdxpp = wptr + 1;
    *rdxpp = this->m_rdxp;
    do_write_mantissa(wptr, frx.mant, 0x1p52, 2, rdxpp);
    *wptr = 'p';
    wptr += 1;
    do_write_exp(wptr, frx.exp);

    ROCKET_ASSERT(wptr < ::std::end(this->m_stor));
    *wptr = 0;

    this->m_data = this->m_stor + (1U - frx.sign);
    this->m_size = (uint32_t) (wptr - this->m_data);
  }

void
ascii_numput::
put_XD(double value)
  noexcept
  {
    frexp frx = do_frexp2_52(value);
    if(do_is_special_class(this->m_data, this->m_size, frx))
      return;

    frx.exp += 52;
    frx.mant <<= frx.exp & 3;
    frx.exp >>= 2;

    ::memcpy(this->m_stor, "-0x0.**", 8);
    char* wptr = ::std::begin(this->m_stor) + 3;

    if((frx.exp >= 0) && (frx.exp < 14)) {
      // Write the number in plain format. A decimal point will be
      // inserted in the middle.
      char* rdxpp = wptr + (uint32_t) (frx.exp + 1);
      *rdxpp = this->m_rdxp;
      do_write_mantissa(wptr, frx.mant, 0x1p52, 16, rdxpp);
    }
    else if((frx.exp >= -4) && (frx.exp < 0)) {
      // Write the number in plain format. The number starts with
      // `0.` and zeroes are filled as necessary.
      wptr += 2;
      do_write_zeroes(wptr, -(uint32_t) (frx.exp + 1));
      do_write_mantissa(wptr, frx.mant, 0x1p52, 16, nullptr);
    }
    else {
      // Write the number in scientific notation.
      char* rdxpp = wptr + 1;
      *rdxpp = this->m_rdxp;
      do_write_mantissa(wptr, frx.mant, 0x1p52, 16, rdxpp);
      *wptr = 'p';
      wptr += 1;
      do_write_exp(wptr, frx.exp * 4);
    }

    ROCKET_ASSERT(wptr < ::std::end(this->m_stor));
    *wptr = 0;

    this->m_data = this->m_stor + (1U - frx.sign);
    this->m_size = (uint32_t) (wptr - this->m_data);
  }

void
ascii_numput::
put_XED(double value)
  noexcept
  {
    frexp frx = do_frexp2_52(value);
    if(do_is_special_class(this->m_data, this->m_size, frx))
      return;

    frx.exp += 52;
    frx.mant <<= frx.exp & 3;
    frx.exp >>= 2;

    ::memcpy(this->m_stor, "-0x0.**", 8);
    char* wptr = ::std::begin(this->m_stor) + 3;

    // Write the number in scientific notation.
    char* rdxpp = wptr + 1;
    *rdxpp = this->m_rdxp;
    do_write_mantissa(wptr, frx.mant, 0x1p52, 16, rdxpp);
    *wptr = 'p';
    wptr += 1;
    do_write_exp(wptr, frx.exp * 4);

    ROCKET_ASSERT(wptr < ::std::end(this->m_stor));
    *wptr = 0;

    this->m_data = this->m_stor + (1U - frx.sign);
    this->m_size = (uint32_t) (wptr - this->m_data);
  }

void
ascii_numput::
put_DD(double value)
  noexcept
  {
    frexp frx = do_frexp10_17(value);
    if(do_is_special_class(this->m_data, this->m_size, frx))
      return;

    frx.exp += 17;

    ::memcpy(this->m_stor, "-0.", 4);
    char* wptr = ::std::begin(this->m_stor) + 1;

    if((frx.exp >= 0) && (frx.exp < 15)) {
      // Write the number in plain format. A decimal point will be
      // inserted in the middle.
      char* rdxpp = wptr + (uint32_t) (frx.exp + 1);
      *rdxpp = this->m_rdxp;
      do_write_mantissa(wptr, frx.mant, 1e17, 10, rdxpp);
    }
    else if((frx.exp >= -4) && (frx.exp < 0)) {
      // Write the number in plain format. The number starts with
      // `0.` and zeroes are filled as necessary.
      wptr += 2;
      do_write_zeroes(wptr, -(uint32_t) (frx.exp + 1));
      do_write_mantissa(wptr, frx.mant, 1e17, 10, nullptr);
    }
    else {
      // Write the number in scientific notation.
      char* rdxpp = wptr + 1;
      *rdxpp = this->m_rdxp;
      do_write_mantissa(wptr, frx.mant, 1e17, 10, rdxpp);
      *wptr = 'e';
      wptr += 1;
      do_write_exp(wptr, frx.exp);
    }

    ROCKET_ASSERT(wptr < ::std::end(this->m_stor));
    *wptr = 0;

    this->m_data = this->m_stor + (1U - frx.sign);
    this->m_size = (uint32_t) (wptr - this->m_data);
  }

void
ascii_numput::
put_DED(double value)
  noexcept
  {
    frexp frx = do_frexp10_17(value);
    if(do_is_special_class(this->m_data, this->m_size, frx))
      return;

    frx.exp += 17;

    ::memcpy(this->m_stor, "-0.", 4);
    char* wptr = ::std::begin(this->m_stor) + 1;

    // Write the number in scientific notation.
    char* rdxpp = wptr + 1;
    *rdxpp = this->m_rdxp;
    do_write_mantissa(wptr, frx.mant, 1e17, 10, rdxpp);
    *wptr = 'e';
    wptr += 1;
    do_write_exp(wptr, frx.exp);

    ROCKET_ASSERT(wptr < ::std::end(this->m_stor));
    *wptr = 0;

    this->m_data = this->m_stor + (1U - frx.sign);
    this->m_size = (uint32_t) (wptr - this->m_data);
  }

}  // namespace rocket
