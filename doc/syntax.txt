### Lexicology

identifier ::=
	PCRE([A-Za-z_][A-Za-z_0-9]*)

literal ::=
	keyword-literal | string-literal | numeric-literal

keyword-literal ::=
	"null" | "false" | "true"

string-literal ::=
	( escape-string-literal | noescape-string-literal ) string-literal ?

escape-string-literal ::=
	PCRE("([^\\]|(\\([abfnrtveZ0'"?\\/]|(x[0-9A-Fa-f]{2})|(u[0-9A-Fa-f]{4})|(U[0-9A-Fa-f]{6}))))*?")

noescape-string-literal ::=
	PCRE('[^']*?')

numeric-literal ::=
	number-sign ? unsigned-numeric-literal

number-sign ::=
	PCRE([+-])

unsigned-numeric-literal ::=
	"nan" | "NaN" | "infinity" | "Infinity" |
	( binary-literal | decimal-literal | hexadecimal-literal ) exponent-suffix ?

binary-literal ::=
	PCRE(0[bB]([01]`?)+(\.([01]`?)+))

decimal-literal ::=
	PCRE(([0-9]`?)+(\.([0-9]`?)+))

hexadecimal-literal ::=
	PCRE(0[xX]([0-9A-Fa-f]`?)+(\.([0-9A-Fa-f]`?)+))

exponent-suffix ::=
	decimal-exponent-suffix | binary-exponent-suffix

decimal-exponent-suffix ::=
	PCRE([eE][-+]?([0-9]`?)+)

binary-exponent-suffix ::=
	PCRE([pP][-+]?([0-9]`?)+)

### Syntax

document ::=
	statement *

statement ::=
	variable-definition | immutable-variable-definition | reference-definition |
	function-definition | defer-statement | null-statement |
	nondeclaration-statement

null-statement ::=
	";"

nondeclaration-statement ::=
	if-statement | switch-statement | do-while-statement | while-statement |
	for-statement | break-statement | continue-statement | throw-statement |
	return-statement | assert-statement | try-statement | statement-block |
	expression-statement

variable-definition ::=
	"var" variable-declarator equal-initailizer ? ( "," variable-declarator
	equal-initializer ? ) ? ";"

variable-declarator ::=
	identifier | structured-binding-array | structured-binding-object

structured-binding-array ::=
	"[" identifier + "]"

structured-binding-object ::=
	"{" identifier + "}"

equal-initializer ::=
	"=" expression

immutable-variable-definition ::=
	"const" variable-declarator equal-initailizer ( "," variable-declarator
	equal-initializer ) ? ";"

reference-definition ::=
	"ref" identifier ref-initailizer ( "," identifier ref-initializer ) ? ";"

function-definition ::=
	"func" identifier "(" parameter-list ? ")" statement-block

parameter-list ::=
	"..." | identifier ( "," parameter-list ? ) ?

statement-block ::=
	"{" statement * "}"

defer-statement ::=
	"defer" expression ";"

if-statement ::=
	"if" negation ? "(" expression ")" nondeclaration-statement ( "else"
	nondeclaration-statement ) ?

negation ::=
	"!" | "not"

switch-statement ::=
	"switch" "(" expression ")" "{" swtich-clause * "}"

switch-clause ::=
	( "case" expression | "default" ) ":" statement *

do-while-statement ::=
	"do" nondeclaration-statement "while" negation ? "(" expression ")" ";"

while-statement ::=
	"while" negation ? "(" expression ")" nondeclaration-statement

for-statement ::=
	"for" "(" for-complement

for-complement ::=
	for-complement-range | for-complement-triplet

for-complement-range ::=
	"each" identifier ( ( "," | ":" | "=" ) identifier ) ? "->" expression ")"
	nondeclaration-statement

for-complement-triplet ::=
	for-initializer expression ? ";" expression ? ")" nondeclaration-statement

for-initializer ::=
	null-statement | variable-definition | immutable-variable-definition |
	expression-statement

break-statement ::=
	"break" break-target ? ";"

break-target ::=
	"switch" | "while" | "for"

continue-statement ::=
	"continue" continue-target ? ";"

continue-target ::=
	"while" | "for"

throw-statement ::=
	"throw" expression ";"

return-statement ::=
	"return" argument ? ";"

argument ::=
	reference-specifier ? expression | expression

reference-specifier ::=
	"ref" | "->"

assert-statement ::=
	"assert" expression ( ":" string-literal ) ? ";"

try-statement ::=
	"try" nondeclaration-statement "catch" "(" identifier ")"
	nondeclaration-statement

expression-statement ::=
	expression ";"

expression ::=
	infix-element infix-carriage *

infix-element ::=
	prefix-operator * primary-expression postfix-operator *

prefix-operator ::=
	"+" | "-" | "~" | "!" | "++" | "--" |
	"unset" | "countof" | "typeof" | "not" |
	"__abs" | "__sqrt" | "__sign" | "__isnan" | "__isinf" |
	"__round" | "__floor" | "__ceil" | "__trunc" | "__iround" | "__ifloor" |
	"__iceil" | "__itrunc" | "__lzcnt" | "__tzcnt" | "__popcnt"

primary-expression ::=
	identifier | extern-identifier | literal | "this" | closure-function |
	unnamed-array | unnamed-object | nested-expression | fused-multiply-add |
	prefix-binary-expression |catch-expression | variadic-function-call |
	import-function-call

extern-identifier ::=
	"extern" identifier

closure-function ::=
	"func" "(" parameter-list ? ")" closure-body

closure-body ::=
	statement-block | equal-initializer | ref-initializer

ref-initializer ::=
	"->" expression

unnamed-array ::=
	"[" array-element-list ? "]"

array-element-list ::=
	expression ( ( "," | ";" ) array-element-list ? ) ?

unnamed-object ::=
	"{" object-member-list "}"

object-member-list ::=
	( string-literal | identifier ) ( "=" | ":" ) expression ( ( "," | ";" )
	object-member-list ? ) ?

nested-expression ::=
	"(" expression ")"

fused-multiply-add ::=
	"__fma" "(" expression "," expression "," expression ")"

prefix-binary-expression ::=
	prefix-binary-operator "(" expression "," expression ")"

prefix-binary-operator ::=
	"__addm" | "__subm" | "__mulm" | "__adds" | "__subs" | "__muls"

catch-expression ::=
	"catch" "(" expression ")"

variadic-function-call ::=
	"__vcall" "(" expression "," expression ")"

import-function-call ::=
	"import" "(" argument-list ")"

postfix-operator ::=
	"++" | "--" | "[^]" | "[$]" | "[?]" | postfix-function-call |
	postfix-subscript | postfix-member-access | postfix-operator

postfix-function-call ::=
	"(" argument-list ? ")"

argument-list ::=
	argument ( "," argument-list ? ) ?

postfix-subscript ::=
	"[" expression "]"

postfix-member-access ::=
	"." ( string-literal | identifier )

infix-carriage ::=
	infix-operator infix-element

infix-operator ::=
	infix-ternary | infix-logical-and | infix-logical-or | infix-coalescence |
	infix-operator-general

infix-operator-ternary ::=
	( "?" | "?=" ) expression ":"

infix-operator-logical-and ::=
	"&&" | "&&=" | "and"

infix-operator-logical-or ::=
	"||" | "||=" | "or"

infix-operator-coalescence ::=
	"??" | "??="

infix-operator-general ::=
	"+" | "-" | "*" | "/" | "%" | "<<" | ">>" | "<<<" | ">>>" | "&" | "|" |
	"^" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "<<<=" | ">>>=" |
	"&=" | "|=" | "^=" | "=" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "<=>" |
	"</>"
