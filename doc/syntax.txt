document ::=
	directive-or-statement-list-opt

identifier ::=
	PCRE([A-Za-z_][A-Za-z_0-9]*)
literal ::=
	null-literal | boolean-literal | string-literal | noescape-string-literal |
	numeric-literal | nan-literal | infinity-literal
null-literal ::=
	"null"
boolean-litearl ::=
	"false" | "true"
string-literal ::=
	PCRE("([^\\]|(\\([abfnrtveZ0'"?\\]|(x[0-9A-Fa-f]{2})|(u[0-9A-Fa-f]{4})|(U[0-9A-Fa-f]{6}))))*?")
noescape-string-literal ::=
	PCRE('[^']*?')
numeric-literal ::=
	( binary-literal | decimal-literal | hexadecimal-literal ) exponent-suffix-opt
exponent-suffix-opt ::=
	decimal-exponent-suffix | binary-exponent-suffix | ""
binary-literal ::=
	PCRE(0[bB][01`]+(\.[01`]+)
decimal-literal ::=
	PCRE([0-9`]+(\.[0-9`]+))
hexadecimal-literal ::=
	PCRE(0[xX][0-9A-Fa-f`]+(\.[0-9A-Fa-f`]+))
decimal-exponent-suffix ::=
	PCRE([eE][-+]?[0-9`]+)
binary-exponent-suffix ::=
	PCRE([pP][-+]?[0-9`]+)
nan-literal ::=
	"nan"
infinity-literal ::=
	"infinity"

statement ::=
	block | nonblock-statement

block ::=
	"{" statement-list-opt "}"
statement-list-opt ::=
	statement-list | ""
statement-list ::=
	statement statement-list-opt

nonblock-statement ::=
	null-statement |
	variable-definition | immutable-variable-definition | function-definition |
	expression-statement |
	if-statement | switch-statement |
	do-while-statement | while-statement | for-statement |
	break-statement | continue-statement | throw-statement | return-statement |
	try-statement

null-statement ::=
	";"

variable-definition ::=
	"var" identifier equal-initailizer-opt ";"
equal-initializer-opt ::=
	equal-initializer | ""
equal-initializer ::=
	"=" expression
immutable-variable-definition ::=
	"const" identifier equal-initailizer ";"
function-definition ::=
	"func" identifier "(" identifier-list-opt ")" statement
identifier-list-opt ::=
	identifier-list | ""
identifier-list ::=
	identifier ( "," identifier-list | "" )

expression-statement ::=
	expression ";"

if-statement ::=
	"if" "(" expression ")" statement ( "else" statement | "" )
switch-statement ::=
	"switch" "(" expression ")" switch-block
switch-block ::=
	"{" swtich-clause-list-opt "}"
switch-clause-list-opt ::=
	switch-clause-list | ""
switch-clause-list ::=
	( "case" expression | "default" ) ":" statement-list-opt switch-clause-list-opt

do-while-statement ::=
	"do" statement "while" "(" expression ")" ";"
while-statement ::=
	"while" "(" expression ")" statement
for-statement ::=
	"for" "(" ( for-statement-range | for-statement-triplet ) ")" statement
for-statement-range ::=
	"each" identifier "," identifier ":" expression
for-statement-triplet ::=
	( null-statement | variable-definition | expression-statement ) expression-opt ";" expression-opt

break-statement ::=
	"break" ( "switch" | "while" | "for" ) ";"
continue-statement ::=
	"continue" ( "while" | "for" ) ";"
throw-statement ::=
	"throw" expression ";"
return-statement ::=
	"return" expression-opt ";"

try-statement ::=
	"try" statement "catch" "(" identifier ")" statement

expression-opt ::=
	expression | ""
expression ::=
	infix-element infix-operator-list-opt
infix-element ::=
	( prefix-operator-list primary-expression | primary_expression ) postfix-operator-list-opt

prefix-operator-list-opt ::=
	prefix-operator-list | ""
prefix-operator-list ::=
	prefix-operator prefix-operator-list-opt
prefix-operator ::=
	"+" | "-" | "~" | "!" | "++" | "--" | "unset"

primary-expression ::=
	identifier | literal | "this" | closure-function | unnamed-array | unnamed-object | nested-expression
closure-function ::=
	"func" "(" identifier-list-opt ")" statement
unnamed-array ::=
	"[" array-element-list-opt "]"
array-element-list-opt ::=
	array-element-list | ""
array-element-list ::=
	expression ( comma-or-semicolon array-element-list-opt | "" )
comma-or-semicolon ::=
	"," | ";"
unnamed-object ::=
	"{" key-mapped-list-opt "}"
key-mapped-list-opt ::=
	key-mapped-list | ""
key-mapped-list ::=
	( string-literal | identifier ) "=" expression ( comma-or-semicolon key-mapped-list-opt | "" )
nested-expression ::=
	"(" expression ")"

postfix-operator-list-opt ::=
	postfix-operator-list | ""
postfix-operator-list ::=
	postfix-operator | postfix-function-call | postfix-subscript | postfix-member-access
postfix-operator ::=
	"++" | "--"
postfix-function-call ::=
	"(" argument-list-opt ")"
argument-list-opt ::=
	argument-list | ""
argument-list ::=
	expression ( "," argument-list | "" )
postfix-subscript ::=
	"[" expression "]"
postfix-member-access ::=
	"." identifier

infix-operator-list-opt ::=
	infix-operator-list | ""
infix-operator-list ::=
	( infix-selection | infix-operator ) infix-operator-list-opt
infix-selection ::=
	( "?"  expression ":" | "&&"  | "||"  | "??"  |
	  "?=" expression ":" | "&&=" | "||=" | "??=" ) infix-element
infix-operator ::=
	( "+"  | "-"  | "*"  | "/"  | "%"  | "<<"  | ">>"  | "<<<"  | ">>>"  | "&"  | "|"  | "^"  |
	  "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "<<<=" | ">>>=" | "&=" | "|=" | "^=" |
	  "="  | "==" | "!=" | "<"  | ">"  | "<="  | ">="  | "<=>"  ) infix-element

directive-or-statement-list-opt ::=
	directive-or-statement-list | ""
directive-or-statement-list ::=
	directive-or-statement directive-or-statement-list-opt
directive-or-statement ::=
	directive | statement

directive ::=
	export-directive | import-directive

export-directive ::=
	"export" identifier ";"
import-directive ::=
	"import" string-literal ";"
